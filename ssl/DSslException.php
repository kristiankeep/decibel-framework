<?php
//
// Copyright (c) 2008-2016 Decibel Technology Limited.
//
namespace app\decibel\ssl;

use app\decibel\debug\DException;

/**
 * Handles an exception occurring in SSL functionality.
 *
 * @section        why Why Would I Use It?
 *
 * This class can be extended to create new SSL related exceptions.
 *
 * @section        how How Do I Use It?
 *
 * See @ref debugging_exceptions_custom for information about writing custom
 * exceptions.
 *
 * @section        example Examples
 *
 * Following is an example of a custom SSL exception class:
 *
 * @code
 * namesapce app\MyApp;
 *
 * class DMySslException extends app\decibel\ssl\DSslException {
 *    const message = 'Invalid SSL certificate for domain <code>%s</code>.';
 * }
 * @endcode
 *
 * The custom exception can then be thrown using the following code:
 *
 * @code
 * throw new app\MyApp\DMySslException('www.mydomain.com');
 * @endcode
 *
 * This will generate the following message:
 *
 * <em>Invalid SSL certificate for domain <code>www.mydomain.com</code>.</em>
 *
 * @section        versioning Version Control
 *
 * @author         Timothy de Paris
 * @ingroup        ssl_exceptions
 */
abstract class DSslException extends DException
{
    /**
     * Clears any outstanding OpenSSL error messages.
     *
     * @note
     * This should be called before executing any OpenSSL function to ensure
     * that only errors generated by that function call are reported.
     *
     * @return    void
     */
    public static function clearOpenSslErrors()
    {
        while (openssl_error_string() !== false) {
            // Do nothing, just clear them from the buffer.
        }
    }

    /**
     * Returns an array containing OpenSSL error messages.
     *
     * @return    array
     */
    public static function getOpenSslErrors()
    {
        $errors = array();
        while ($error = openssl_error_string()) {
            $errors[] = $error;
        }

        // Returns in order of occurrence.
        return array_reverse($errors);
    }

    /**
     * Parses OpenSSL error messages and returns the most appropriate
     * exception for the errors.
     *
     * @param    DSslException $default   The default exception to return if no
     *                                    applicable exception was detected.
     *
     * @return    DSslException
     */
    public static function getOpenSslException(DSslException $default = null)
    {
        $exception = $default;
        foreach (DSslException::getOpenSslErrors() as $error) {
            if (strpos($error, 'error:2006D080:') === 0) {
                $exception = new DSslConfigurationException('Unable to locate OpenSSL configuration file.');
                break;
            }
        }

        return $exception;
    }
}
