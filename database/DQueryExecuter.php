<?php
//
// Copyright (c) 2008-2016 Decibel Technology Limited.
//
namespace app\decibel\database;

use app\decibel\database\debug\DDatabaseException;
use app\decibel\database\debug\DQueryExecutionException;

/**
 * Undertakes execution of queries.
 *
 * @author    Timothy de Paris
 */
abstract class DQueryExecuter
{
    /**
     * The number of rows affected by the query.
     *
     * @var        int
     */
    protected $affectedRows;

    /**
     * The last auto_increment id generated by this query.
     *
     * @var        int
     */
    protected $insertId;

    /**
     * The resource representing the result of this query.
     *
     * @var        resource
     */
    protected $result;

    /**
     * The number of rows returned by the query.
     *
     * @var        int
     */
    protected $returnedRows;

    /**
     * Creates a new {@link DQueryExecuter}.
     *
     * @return    static
     * @throws    DQueryExecutionException    If execution fails.
     */
    public function __construct()
    {
        $this->affectedRows = 0;
        $this->result = false;
    }

    /**
     * Frees memory and resources associated with the query.
     *
     * @return    void
     */
    abstract public function free();

    /**
     * Provides debugging output for this object.
     *
     * @return    array
     */
    public function generateDebug()
    {
        return array(
            'affectedRows'  => $this->affectedRows,
            'returnedRows'  => $this->returnedRows,
            'executionTime' => $this->executionTime,
            'insertId'      => $this->insertId,
        );
    }

    /**
     * Returns the number of rows affected by the query.
     *
     * @return    int
     */
    public function getAffectedRows()
    {
        return $this->affectedRows;
    }

    /**
     * Returns the last error to occur in the database.
     *
     * @return    DDatabaseException    An exception object describing the error,
     *                                or <code>null</code> if no error occurred.
     */
    abstract public function getError();

    /**
     * Returns the ID generated for an AUTO_INCREMENT column by the
     * previous INSERT query.
     *
     * @return    int
     */
    public function getInsertId()
    {
        return $this->insertId;
    }

    /**
     * Return the next row of results from the query.
     *
     * @return    array    The next row, or <code>null</code> if there are no more rows.
     */
    abstract public function getNextRow();

    /**
     * Returns the results of the query as a multi-dimensional array.
     *
     * @return    array    A pointer to the query results.
     */
    abstract public function &getResults();

    /**
     * Returns the number of rows returned by the query.
     *
     * @note
     * If more than one query is executed, the number of results returned
     * by the final query will returned by this function.
     *
     * @return    int
     */
    public function getReturnedRows()
    {
        return $this->returnedRows;
    }

    /**
     * Appends additional information to the provided exception before throwing it.
     *
     * @param    DDatabaseException $error     The error as an exception.
     * @param    string             $statement Statement that generated the error.
     *
     * @return    void
     * @throws    DDatabaseException
     */
    protected function handleError(DDatabaseException $error = null, $statement = null)
    {
        if ($error === null) {
            return;
        }
        if ($statement !== null) {
            $error->appendToMessage(' during execution of statement: <code>' . htmlentities($statement) . '</code>');
        }
        $error->regenerateBacktrace();
        throw $error;
    }

    /**
     * Determines if the query executed successfully.
     *
     * @return    bool
     */
    public function isSuccessful()
    {
        return ($this->result !== false);
    }
}
