<?php

/**
 * @defgroup database Database
 *
 * Classes that are used to interact with the application database or directly
 * with other external databases.
 *
 * See the @ref database Developer Guide for further information.
 */

/**
 * @defgroup database_controllers Database Controllers
 * @ingroup database
 *
 * Database controller implementations for access to specific database servers.
 *
 * See the @ref database_controllers Developer Guide for further information.
 */

/**
 * @defgroup database_events Database Events
 * @ingroup database
 *
 * Events relating to database functionality within %Decibel.
 */

/**
 * @defgroup database_exceptions Database Exceptions
 * @ingroup database
 *
 * Exceptions relevant to the database access functionality of %Decibel.
 *
 * See the @ref database_exceptions Developer Guide for further information.
 */

/**
 * @page	database	Databases and Queries
 *
 * %Decibel provides two classes that abstract database access and query
 * execution within the application, DDatabase and DQuery.
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\DQuery;
 * use app\decibel\database\mysql\DMySQL;
 *
 * $externalDatabase = new DMySQL(
 *		'user',
 *		'password',
 *		'externalhost',
 *		'external_db_name'
 * );
 *
 * $query = new DQuery(
 * 		"SELECT `id` FROM `decibel_authorise_duser` WHERE `username`='#username#';",
 * 		array(
 * 			'username'	=> 'admin',
 * 		),
 * 		$externalDatabase
 * );
 *
 * while ($row = $query->getNextRow()) {
 *		echo $row['id'];
 * }
 * @endcode
 *
 * @note
 * In most cases, a developer should not need to directly access the database
 * through the DDatabase or DQuery objects, as %Decibel provides full ORM
 * functionality. See the @ref model_orm Developer Guide for information about
 * manipulating and querying model information.
 *
 * The following sections describe the use of database functionality within
 * an application:
 *
 * - @subpage database_controllers
 * - @subpage database_application
 * - @subpage database_external
 * - @subpage database_querying
 * - @subpage database_exceptions
 */

/**
 * @page	database_controllers	Database Controllers
 *
 * %Decibel provides an abstract database controller class
 * ({@link app::decibel::database::DDatabase DDatabase})
 * to manage connections to any RDBMS. Currently, {@link app::decibel::database::DMySQL MySQL},
 * and {@link app::decibel::database::odbc::DODBC ODBC} controllers are available,
 * however the core framework will only run on MySQL.
 *
 * Developers may define new controllers by extending {@link app::decibel::database::DDatabase DDatabase}
 * should they require direct access to another RDBMS. These controllers can then
 * be passed to the {@link app::decibel::database::DQuery::__construct() DQuery constructor}
 * to query the data.
 *
 * @section database_controllers_example Example
 *
 * The following code snippet shows a partial implementation of a custom
 * PostgreSQL Database Controller:
 *
 * @code
 * namespace app\MyApp\Database;
 *
 * use app\decibel\database\DDatabase;
 *
 * class PGSQL extends DDatabase {
 *
 * 	public function connect() {
 * 		$conn = "host={$this->hostname} dbname={$this->dbname} user={$this->username} password={$this->password}";
 * 		$this->connection = pg_connect($conn);
 * 		...
 * 	}
 *
 * 	...
 *
 * }
 * @endcode
 *
 * See the {@link app::decibel::database::DDatabase DDatabase} API documentation
 * for further information.
 */

/**
 * @page	database_application	Application Database
 *
 * %Decibel stores all application data in a single MySQL database.
 *
 * @note
 * Connection details for the Application Database are stored
 * in the @ref configuration_database configuration file.
 *
 * @warning
 * Never add custom table definitions directly to the application database,
 * or modify the structure of existing tables. The following information
 * describes available methods for modifying the application database structure.
 *
 * @section database_application_access Accessing the Application Database
 *
 * The application database controller can be accessed via
 * {@link app::decibel::database::DDatabase::getDatabase() DDatabase::getDatabase()}, for example:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\DDatabase;
 *
 * $applicationDatabase = DDatabase::getDatabase();
 * if ($applicationDatabase->connected()) {
 * 	echo 'Connected!';
 * }
 * @endcode
 *
 * @note
 * Queries generated by the DQuery class will operate on the application
 * database by default, unless a specific database controller is provided
 * to the {@link app::decibel::database::DQuery::__construct() DQuery constructor}.
 *
 * @section database_application_structure Application Database Structure
 *
 * %Decibel should always be left to control the database structure and content,
 * by using calls to the appropriate classes in the API. %Decibel automatically
 * generates the structure of the Application Database based on the following
 * information:
 *
 * @subsection database_application_structure_models Model Definitions
 *
 * Tables are automatically created in the application database by %Decibel
 * based on model definitions. For example, the following model definition:
 *
 * @code
 * namespace app\MyApp\News;
 *
 * use app\decibel\model\DModel_Definition;
 * use app\decibel\model\field\DDateField;
 * use app\decibel\model\field\DTextField;
 *
 * class Article_Definition extends DModel_Definition {
 *
 * 	public function __construct($qualifiedName) {
 *
 * 		parent::__construct($qualifiedName);
 *
 * 		$field = new DTextField('title', 'Title');
 * 		$field->maxLength = 100;
 * 		$this->addField($field);
 *
 * 		$field = new DDateField('publishDate', 'Publication Date');
 * 		$this->addField($field);
 *
 * 	}
 * }
 * @endcode
 *
 * Would cause %Decibel to create the following table
 * in the Application Database:
 *
 * @code
 * CREATE TABLE IF NOT EXISTS `myapp_news_article` (
 * 	`id` bigint(20) unsigned NOT NULL,
 * 	`version` smallint(5) unsigned NOT NULL default '1',
 * 	`title` varchar(100) NOT NULL,
 * 	`publishDate` date NOT NULL,
 * 	PRIMARY KEY  (`id`,`version`)
 * ) ENGINE=MyISAM DEFAULT CHARSET=utf8;
 * @endcode
 *
 * The table name, <code>myapp_news_article</code>, is based on the fully-qualified
 * name of the model (in this case <code>app\\MyApp\\News\\Article</code>).
 * Decibel has automatically added the <code>id</code> and <code>version</code>
 * fields to enable internal version control. The primary key is also fixed
 * by %Decibel for model tables, however additional indexes may be added
 * (see @ref model_indexes).
 *
 * @note
 * If a model definition is modified by a developer, the table structure
 * will automatically be updated by %Decibel, however if a field is removed
 * from the definition, this will not be deleted from the database.
 * See the @ref performance_pruning Developer Guide for information about
 * removing redundant tables and fields from the application database.
 *
 * %Decibel also operates an hierarchical table structure within the database.
 * As the sample model definition above extends
 * {@link app::decibel::model::DModel_Definition app\\decibel\\model\\DModel_Definition},
 * whenever an Article instance is created, a row will be inserted in both
 * the <code>myapp_news_article</code> and <code>decibel_model_dmodel</code>
 * tables. The value of the <code>id</code> and <code>version</code> fields
 * in each table will correspond, denoting these two records as the data
 * for a single model instance.
 *
 * See the @ref model Developer Guide for more information about defining models.
 *
 * @subsection database_application_structure_definition App Table Definitions
 *
 * Custom tables may be added to the application database if required
 * by defining them in the @ref app_tables definition file for an App.
 */

/**
 * @page	database_external	External Databases
 *
 * While most external applications will provide some form of API to access their data, it may
 * be necessary to directly query an external database.
 *
 * This can be achieved by instantiating an appropriate database controller, and passing it to
 * the {@link app::decibel::database::DQuery::__construct DQuery constructor}.
 *
 * See @ref database_querying_external for further information.
 */

/**
 * @page	database_querying	Querying
 *
 * In most cases, the %Decibel database should be completely abstracted from
 * App code by %Decibel's ORM functionality. See the @ref model_orm Developer
 * Guide for more information.
 *
 * An exception where the use of the inbuilt ORM functionality would not
 * be ideal could be where there is a very large volume of information that
 * needs to be reported on in a specific way.
 *
 * @warning
 * Due to the hierarchical and highly normalised structure of the %Decibel
 * database, a high level of understanding is recommended before attempting
 * to access or manipulate data directly within the database.
 * See the @ref model_orm Developer Guide for information about using
 * %Decibel's inbuilt ORM functionality before reverting to direct
 * database queries.
 *
 * The DQuery object can be used in two ways:
 * - Stored Procedures - allows pre-defined SQL statements to be run.
 *		Note that this does not utilise native database stored procedure
 *		functionality.
 * - Ad-hoc Queries - allows ad-hoc SQL statements to be run.
 *
 * @section database_querying_parameters	Query Parameters
 *
 * Both methods allow the use of query parameters. Any data should be passed
 * to the Query object through a query parameter. This ensures that data is
 * correctly escaped and encoded for the database, and will reduce the risk
 * of SQL injection attacks. A query parameter is included in a stored
 * procedure or ad-hoc SQL query by enclosing the parameter name with hash
 * characters (<code>#</code>), for example:
 *
 * @code
 * use app\decibel\database\DQuery;
 *
 * new DQuery(
 * 	"DELETE FROM `myapp_table1` WHERE `id`=#id#"
 * 	array(
 * 		'id'	=> 100
 * 	)
 * );
 * @endcode
 *
 * Various data types can be passed as parameters and will be treated in
 * different ways when inserted into the SQL:
 *
 * - Arrays will be converted into a comma separated string.
 *		This is useful for <code>IN</code> or <code>NOT IN</code> operators.
 * - Booleans will be converted into their integer equivalent
 *		(i.e. <code>1</code> or <code>0</code>)
 * - Model instances will be substituted for the instance ID.
 * - All other parameter values will be cast to a scalar value.
 *
 * @note
 * %Decibel will attempt to achieve compatibility with MySQL's strict mode
 * (http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html)
 * by automatically removing quotes around parameters when a numeric parameter
 * value is provided, however it is better to only quote place-holders
 * for textual fields.
 *
 * @warning
 * Multi-dimensional arrays are not supported as parameter values and will
 * result in a DInvalidParameterValueException being thrown.
 * See @ref database_exceptions for further details.
 *
 * @section database_querying_multiple	Multiple Statements
 *
 * Queries can include multiple SQL statements, each separated
 * by a semi-colon (<code>;</code>), for example:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\DQuery;
 *
 * new DQuery(
 * 	"DELETE FROM `myapp_table1` WHERE `id`=#id#;
 * 	 DELETE FROM `myapp_table2` WHERE `id`=#id#"
 * 	array(
 * 		'id'	=> 100
 * 	)
 * );
 * @endcode
 *
 * @note
 * If multiple statements are executed together, only the result of the final
 * statement will be accessible from the DQuery instance.
 *
 * @note
 * Additional resource is required to separate multiple SQL statements within
 * a query. A small performance gain may be achieved by executing multiple
 * statements separately.
 *
 * @section database_querying_storedprocedures	Stored Procedures
 *
 * Stored Procedures must first be registered using the
 * {@link app::decibel::database::DStoredProcedure::register() DStoredProcedure::register()}
 * method. These registrations should be made in the @ref app_registrations
 * file for an App. Once registered, a stored procedure may be used at any point
 * during application execution, for example:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\DQuery;
 *
 * $query = new DQuery(
 *		'app\\decibel\\authorise\\DAuthorisationManager-getUserId',
 *		array(
 *			'username'	=> 'admin',
 *		)
 * );
 *
 * while ($row = $query->getNextRow()) {
 *		echo $row['id'];
 * }
 * @endcode
 *
 * @section database_querying_adhoc	Ad-hoc Queries
 *
 * Ad-hoc queries can be run at any time during application execution,
 * however it is advisable to use Stored Procedures wherever possible.
 *
 * To run an ad-hoc query, simply pass the SQL to the DQuery constructor,
 * for example:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\DQuery;
 *
 * $query = new DQuery(
 * 		"SELECT `id` FROM `decibel_authorise_duser` WHERE `username`='#username#';",
 * 		array(
 * 			'username'	=> 'admin',
 * 		)
 * );
 *
 * while ($row = $query->getNextRow()) {
 *		echo $row['id'];
 * }
 * @endcode
 *
 * @section database_querying_external Querying External Databases
 *
 * Queries may be made directly to external databases by instantiating an
 * appropriate database controller, and passing this to the DQuery constructor,
 * for example:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\DQuery;
 * use app\decibel\database\mysql\DMySQL;
 *
 * $externalDatabase = new DMySQL(
 *		'user',
 *		'password',
 *		'externalhost',
 *		'external_db_name'
 * );
 *
 * $query = new DQuery(
 * 		"SELECT `id` FROM `decibel_authorise_duser` WHERE `username`='#username#';",
 * 		array(
 * 			'username'	=> 'admin',
 * 		),
 * 		$externalDatabase
 * );
 *
 * while ($row = $query->getNextRow()) {
 *		echo $row['id'];
 * }
 * @endcode
 */

/**
 * @page database_exceptions Database Exceptions
 *
 * There are a range of exceptions that my be thrown while using database
 * and querying functionality. It is recommended that all possible exceptions
 * are managed by developers that utilise this functionality to ensure the most
 * robust code possible is created.
 *
 * See the @ref debugging_exceptions Developer Guide for further information
 * about managing exceptions.
 *
 * @section database_exceptions_connection Database Server Connection (DDatabaseConnectionException)
 *
 * A DDatabaseConnectionException will be thrown when %Decibel is unable to make a requested
 * connection to a database server. This exception will be thrown by the
 * {@link app::decibel::database::DDatabase::getDatabase() DDatabase::getDatabase()} function
 * if %Decibel is unable to connect to the application database, or the
 * {@link app::decibel::database::DDatabase::connect() DDatabase::connect()} function if a connection
 * is being made to an external database.
 *
 * @warning
 * In the case of failure of the application database connection, this exception
 * cannot be caught and application execution will halt.
 *
 * @section database_exceptions_selection Database Selection (DDatabaseSelectionException)
 *
 * The DDatabaseSelectionException will be thrown when the database server
 * is unable to select the requested database to perform queries on. This will
 * usually indicate that the incorrect database name has been provided, however
 * could also indicate a issue with the configuration of permissions
 * on the database server.
 *
 * The exception will be thrown by the {@link app::decibel::database::DDatabase::getDatabase() DDatabase::getDatabase()}
 * function if unable to select the application database, or the
 * {@link app::decibel::database::DDatabase::connect() DDatabase::connect()}
 * function if a problem is encountered when selecting an external database.
 *
 * @warning
 * In the case of failure of the application database selection, this exception
 * cannot be caught and application execution will halt.
 *
 * @section database_exception_invalidvalue Invalid Parameter Value (DInvalidParameterValueException)
 *
 * A DInvalidParameterValueException wil be thrown if a
 * multi-dimensional array is passed as a parameter value to the
 * {@link app::decibel::database::DQuery::__construct() DQuery constructor}
 *
 * @section database_exceptions_queryexecution Query Execution (DQueryExecutionException)
 *
 * The DQueryExecutionException is a generic exception that will be thrown
 * by the {@link app::decibel::database::DQuery::__construct() DQuery constructor} if the database
 * server reports an error while executing the query. The database server's
 * error code and message will be included in the exception message.
 *
 * @section database_exceptions_packetsize Packet Size (DPacketSizeException)
 *
 * Most database servers are configured to accept a limited amount of data
 * in one request, or packet. Generally this equates to the size of a query
 * provided to the database. In MySQL servers, the default packet size is 1MB.
 * Where the size of the query exceeds this limit (for example, attempting to
 * send 2MB of textual data as a field value in an <code>INSERT</code> query),
 * a DPacketSizeException will be thrown by the
 * {@link app::decibel::database::DQuery::__construct() DQuery constructor}.
 *
 * See http://dev.mysql.com/doc/refman/5.6/en/packet-too-large.html for more
 * information about MySQL packet sizes.
 *
 * @section database_exceptions_invalidrow Invalid Row (DInvalidRowException)
 *
 * A DInvalidRowException exception will be thrown when an invalid row
 * is requested from the results of a query. Currently this exception
 * will only be thrown by the {@link app::decibel::database::DQuery::get() DQuery::get()}
 * function where there are no results returned.
 *
 * @section database_exceptions_invalidcolumn Invalid Column (DInvalidColumnException)
 *
 * A DInvalidColumnException exception will be thrown when an invalid column
 * is requested from the results of a query. Currently this exception will only
 * be thrown by the {@link app::decibel::database::DQuery::get() DQuery::get()} function
 * where the <code>$name</code> parameter refers to a non-existent column.
 */

/**
 * @page performance_optimisation Database Optimisation Task
 *
 * The {@link app::decibel::database::maintenance::DOptimiseDatabase DOptimiseDatabase} task
 * is responsible for optimisation of the application database. This involves
 * optimising tables, as well as identifying and cleaning redundant database
 * and file system records.
 *
 * This task should be performed as a part of regular maintenance of a %Decibel
 * installation.
 *
 * @section performance_optimisation_subscribing Subscribing
 *
 * As a scheduled task DOptimiseDatabase is also an event dispatcher and can
 * therefore be subscribed to by a custom App, allowing additional optimisation
 * functionality to be performed, either within the application database
 * or an external database or system.
 *
 * The following example binds the <code>app\\MyApp\\MyApp::onDatabaseOptimise()</code>
 * function to the <code>app\\decibel\\database\\maintenance\\DOptimiseDatabase</code> scheduled task.
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\application\DApp;
 * use app\decibel\database\maintenance\DOptimiseDatabase;
 *
 * class MyApp extends DApp {
 * 	public static function onDatabaseOptimise() {
 * 		// Do something.
 * 	}
 * }
 *
 * DOptimiseDatabase::subscribeNotifer(
 * 	array('app\\MyApp\\MyApp', 'onDatabaseOptimise')
 * );
 * @endcode
 *
 * See the @ref events Developer Guide for further information.
 *
 * @section performance_optimisation_triggering Triggering
 *
 * There are a number of ways to trigger the database optimisation task:
 *
 * @subsection performance_optimisation_triggering_programmatically Programmatically
 *
 * Database Optimisation can be triggered immediately using the following code:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\database\maintenance\DOptimiseDatabase;
 *
 * // Schedule the task for execution.
 * $task = new DOptimiseDatabase();
 * $task->schedule(time());
 * @endcode
 *
 * If a cron job (on Linux) or task (on Windows) has been configured to execute
 * the %Decibel task scheduler, the task will execute on the next task
 * scheduler run. If no task has been configured, the following code can be used:
 *
 * @code
 * namespace app\MyApp;
 *
 * use app\decibel\task\DTaskSchedule;
 *
 * // Trigger the task scheduler.
 * DTaskSchedule::runScheduledTasks();
 * @endcode
 *
 * @warning
 * Scheduling an immediate optimisation could result in poor website performance
 * until the optimisation is complete. It is recommended that optimisation occurs
 * during the nightly maintenance period for a production website.
 *
 * @note
 * The database optimisation task can take a considerable amount of time
 * to run, and execution time limits (for example cgi timeouts) should
 * be considered if using this method. Depending on the configuration of your
 * web server, it may be neccessary to trigger the task scheduler via CLI
 * to avoid these timeouts.
 *
 * @subsection performance_optimisation_triggering_toolkit Decibel Toolkit
 *
 * After installing the @ref toolkit, database optimisation may be triggered
 * by executing the following command:
 *
 * @code
 * toolkit optimise [project root]
 * @endcode
 *
 * @subsection performance_optimisation_triggering_cms CMS Interface
 *
 * The database optimisation task can be triggered on the <em>Database Utilisation</em>
 * screen. Click on the <em>Application \> Maintenance \> Database</em>
 * menu item, then click the <em>Optimise Database</em> action and select when
 * the task should run.
 *
 * @image html performance_optimisation_01.jpg "Scheduling the Database Optimisation Task within Decibel CMS"
 *
 * @warning
 * Scheduling an immediate optimisation could result in poor website performance
 * until the optimisation is complete. It is recommended that optimisation occurs
 * during the nightly maintenance period for a production website.
 *
 * @note
 * This method will only work if a cron job (on Linux) or task (on Windows) has
 * been configured to execute the %Decibel task scheduler. See the @ref events
 * Developer Guide for further information.
 *
 * @subsection performance_optimisation_triggering_netbeans Netbeans IDE
 *
 * After installing the @ref netbeans, database optimisation may be triggered
 * directly through the NetBeans IDE.
 *
 * Right-click on the project name in the <em>Projects</em> window, then click
 * the <em>%Decibel > Run Command...</em> menu item.
 *
 * @image html performance_optimisation_02.jpg "The NetBeans Project menu"
 *
 * Select the <b>decibel:optimise</b> command and click <em>Run</em>. Task
 * output will be displayed in the NetBeans Output console.
 *
 * @image html performance_optimisation_03.jpg "Run Decibel Command selection screen"
 */
