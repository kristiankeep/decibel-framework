/**
 * @page routing Routing
 *
 * All requests are directed to the router by the rules defined
 * by the relevant web server configuration file.
 *
 * By default, Decibel support Apache HTTPD Server (using the <code>.htaccess</code>
 * file) and Nginx (using the <code>.nginx</code> file). Support for other web
 * server can be added by extending the {@link app::decibel::hosting::DWebServer DWebServer}
 * class.
 *
 * @note
 * The only exception to this rule is where the request directly matches
 * the location of a PHP script that begins with a lower case letter, or where
 * custom rules have been added to the web server configuration file.
 *
 * The following pages describe how to configure and utilise %Decibel's routing
 * capabilities.
 *
 * - @subpage routing_bootstrap
 * - @subpage routing_htaccess
 * - @subpage routing_standard
 * - @subpage routing_custom
 * - @subpage routing_redirects
 */

/**
 * @page routing_bootstrap Application Bootstrap
 *
 * %Decibel manages all requests via it's routing system. There are a range
 * of routers defined by Decibel, each tasked with managing a subset of common
 * web application requests. It is also possible to define custom routers
 * should an application need to handle non-standard requests. For further
 * information about available routers and defining custom routers,
 * see @ref routing_standard and @ref routing_custom.
 *
 * @section routing_bootstrap_custom Custom Bootstrap
 *
 * It is possible to access the %Decibel API without using the routing system,
 * however this is not recommended. In this scenario, it would be necessary
 * to bootstrap %Decibel before gaining access to the API. The following code
 * could be used to bootstrap %Decibel from the file
 * <code>app/MyApp/myscript.php</code>:
 *
 * @code
 * include_once('../../app/decibel/application/bootstrap.php');
 * @endcode
 *
 * Once the <code>bootstrap.php</code> file is included, the full %Decibel
 * API will be available.
 *
 * @section routing_bootstrap_tasks Bootstrap Tasks
 *
 * The following tasks are carried out by the bootstrap:
 *
 * - Starting the @ref utility_session if required
 * - Connecting to the @ref database_application
 * - Initialising the @ref performance_shmcache system
 * - Setting up @ref debugging
 * - Registering @ref app "Custom Apps"
 */

/**
 * @page routing_htaccess Web Server Configuration File
 *
 * All requests for a Decibel application are routed through
 * the applicable web server configuration file as generated by Decibel.
 *
 * By default, Decibel support Apache HTTPD Server (using the <code>.htaccess</code>
 * file) and Nginx (using the <code>.nginx</code> file). Support for other web
 * server can be added by extending the {@link app::decibel::hosting::DWebServer DWebServer}
 * class.
 *
 * @warning
 * Decibel maintains settings within the web server configuration file
 * based on the installation's configuration options. Any modifications
 * made directly to the contents of the web server configuration file will
 * be automatically overriden.
 */

/**
 * @page routing_standard Standard Routers
 *
 * Coming soon. If you need assistance with this topic immediately, please
 * ask a question at http://portal.decibeltechnology.com
 */

/**
 * @page routing_custom Custom Routers
 *
 * Coming soon. If you need assistance with this topic immediately, please
 * ask a question at http://portal.decibeltechnology.com
 */

/**
 * @page routing_redirects Redirecting
 *
 * Redirects can be issued by an application by throwing an instance of
 * one of the following classes:
 *
 * - {@link app::decibel::http::DRedirect DRedirect} - To issue a HTTP 302 (found) redirect
 * - {@link app::decibel::http::DTemporaryRedirect DTemporaryRedirect} - To issue a HTTP 307 (temporary) redirect
 * - {@link app::decibel::http::DPermanentRedirect DPermanentRedirect} - To issue a HTTP 301 (permanent) redirect
 *
 * @note
 * Decibel treats redirects as exceptions to ensure that control of application
 * execution can be maintained during the issuing of a redirect. This means
 * that code calling a method that may issue a redirect can catch that redirect
 * and decide whether to proceed with the redirect, or continue execution.
 *
 * @section routing_redirects_example Example
 *
 * The following code shows a redirect being issued:
 *
 * @code
 * use app\decibel\http\DTemporaryRedirect;
 *
 * function doSomething() {
 * 	throw new DTemporaryRedirect('http://www.mywebsite.com');
 * }
 * @endcode
 *
 * The code below demonstrates how a redirect can be caught and a decision
 * made as to whether it should be returned to the client:
 *
 * @code
 * use app\decibel\authorise\DGuestUser;
 * use app\decibel\http\DTemporaryRedirect;
 *
 * function doSomething() {
 * 	throw new DTemporaryRedirect('http://www.mywebsite.com');
 * }
 *
 * try {
 * 	doSomething();
 *
 * // Catch the redirect and decide whether to proceed
 * // sending it to the client or not. In this case,
 * // we won't perform the redirect unless the Guest
 * // user is currently logged in.
 * } catch (DTemporaryRedirect $redirect) {
 * 	$user = DAuthorisationManager::getUser();
 * 	if ($user instanceof DGuestUser) {
 * 		throw $redirect;
 * 	}
 * }
 * @endcode
 *
 * @section routing_redirects_debugging Debugging Redirects
 *
 * When issuing a redirect, it is also possible to provide a reason for that
 * redirect being issued. This aids in debugging of applications allowing the
 * developer to understand why a redirect may have occurred.
 *
 * A reason should be provided as the second parameter to the constructor
 * of the thrown redirect, for example:
 *
 * @code
 * use app\decibel\http\DTemporaryRedirect;
 *
 * function doSomething() {
 * 	throw new DTemporaryRedirect(
 * 		'http://www.mywebsite.com',
 * 		'Sending logged in user to the portal dashboard.'
 * 	);
 * }
 * @endcode
 *
 * When debugging the application, the following screen will be shown
 * in the browser:
 *
 * @image html routing_redirects_debugging_01.jpg "Decibel Debug Console (Redirect Advice)"
 *
 * @note
 * The provided reason will only be shown when the application is running in
 * {@link app::decibel::configuration::DApplicationMode::MODE_DEBUG DApplicationMode::MODE_DEBUG}.
 * See the @ref configuration_mode Developer Guide for further information about
 * Application Modes.
 *
 * If you do not wish to show the Redirect Advice when the application is running in
 * {@link app::decibel::configuration::DApplicationMode::MODE_DEBUG DApplicationMode::MODE_DEBUG},
 * pass <code>null</code> as the second parameter to the constructor.
 */