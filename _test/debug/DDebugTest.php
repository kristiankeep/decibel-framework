<?php
namespace tests\app\decibel\debug;

use app\decibel\debug\DDebug;
use app\decibel\test\DTestCase;
use stdClass;

/**
 * Test class for DDebug.
 * Generated by Decibel on 2011-10-31 at 14:08:38.
 */
class DDebugTest extends DTestCase
{
    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     * @covers app\decibel\debug\DDebug::booleanToMsg
     */
    public function test__setWithBoolean()
    {
        // false
        $valueFalse = false;
        $debugFalse = new DDebug($valueFalse, false, false);
        $this->assertNull($debugFalse->getFile());
        $this->assertNull($debugFalse->getLine());
        $this->assertSame('bool(false)', $debugFalse->getMessage());
        $this->assertNull($debugFalse->getBacktrace());
        // true
        $valueTrue = true;
        $debugTrue = new DDebug($valueTrue, false, false);
        $this->assertNull($debugTrue->getFile());
        $this->assertNull($debugTrue->getLine());
        $this->assertSame('bool(true)', $debugTrue->getMessage());
        $this->assertNull($debugTrue->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     */
    public function test__setWithInteger()
    {
        $fixture = range(0, 9);
        foreach ($fixture as $value) {
            $result = new DDebug($value, false, false);
            $this->assertNull($result->getFile());
            $this->assertNull($result->getLine());
            $this->assertSame('int(' . $value . ')', $result->getMessage());
            $this->assertNull($result->getBacktrace());
        }
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     */
    public function test__setWithFloat()
    {
        $fixture = array(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.111);
        foreach ($fixture as $value) {
            $result = new DDebug($value, false, false);
            $this->assertNull($result->getFile());
            $this->assertNull($result->getLine());
            $this->assertSame('float(' . $value . ')', $result->getMessage());
            $this->assertNull($result->getBacktrace());
        }
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     * @covers app\decibel\debug\DDebug::stringToMsg
     */
    public function test__setWithString()
    {
        $fixture = array('test1', 'test2"', 'test3Â£', 'test4$', 'test5%');
        foreach ($fixture as $value) {
            $result = new DDebug($value, false, false);
            $this->assertNull($result->getFile());
            $this->assertNull($result->getLine());
            $this->assertSame('string(' . strlen($value) . ") '" . strip_tags($value) . "'", $result->getMessage());
            $this->assertNull($result->getBacktrace());
        }
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     * @covers app\decibel\debug\DDebug::arrayToMsg
     * @covers app\decibel\debug\DDebug::arrayValueToMsg
     */
    public function test__setWithArray()
    {
        $fixture = array('test1', 'test2');
        $result = new DDebug($fixture, false, false);
        $this->assertNull($result->getFile());
        $this->assertNull($result->getLine());
        $this->assertSame(
            "array (\n" .
            "  0 => 'test1',\n" .
            "  1 => 'test2',\n" .
            ")",
            $result->getMessage()
        );
        //		$this->assertRegExp(
        //			'/<table>'.
        //			'<tr><td colspan="2">array\(2\)<\/td><\/tr>'.
        //			'<tr><td>0 =&gt;<\/td><td>string\(5\) \'test1\'<\/td><\/tr>'.
        //			'<tr><td>1 =&gt;<\/td><td>string\(5\) \'test2\'<\/td><\/tr>'.
        //			'<\/table>/',
        //			$result->getMessage()
        //		);
        $this->assertNull($result->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     * @covers app\decibel\debug\DDebug::objectToMsg
     */
    public function test__setWithObject()
    {
        $result = new DDebug(new stdClass(), false, false);
        $this->assertNull($result->getFile());
        $this->assertNull($result->getLine());
        $this->assertSame("stdClass Object\n(\n)\n", $result->getMessage());
        $this->assertNull($result->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     */
    public function test__setWithNull()
    {
        $value = null;
        $result = new DDebug($value, false, false);
        $this->assertNull($result->getFile());
        $this->assertNull($result->getLine());
        $this->assertSame('NULL', $result->getMessage());
        $this->assertNull($result->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DDebug::__construct
     * @covers app\decibel\debug\DDebug::prepareForDebug
     * @covers app\decibel\debug\DDebug::variableToMsg
     */
    public function test__setWithDefault()
    {
        $fixture = (binary)1001;
        $result = new DDebug($fixture, false, false);
        $this->assertNull($result->getFile());
        $this->assertNull($result->getLine());
        $this->assertSame(
            'string(' . strlen($fixture) . ') ' . var_export($fixture, true),
            $result->getMessage()
        );
        $this->assertNull($result->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DDebug::__toString
     */
    public function test__toString()
    {
        $fixture = 'hello world';
        $result = new DDebug($fixture, false, false);
        $to_string = (string)$result;
        $this->assertSame('string(' . strlen($fixture) . ') ' . var_export($fixture, true), $to_string);
    }
}
