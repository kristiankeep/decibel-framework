<?php
namespace tests\app\decibel\debug;

use app\decibel\debug\DDeprecatedException;
use app\decibel\debug\DError;
use app\decibel\test\DTestCase;
use Exception;

/**
 * Test class for DError.
 * Generated by Decibel on 2011-10-31 at 14:08:43.
 */
class DErrorTest extends DTestCase
{
    /**
     * @covers app\decibel\debug\DError::__construct
     */
    public function test__construct()
    {
        $error = new DError(DError::TYPE_ASSERTION);
        $this->assertInstanceOf('app\\decibel\\debug\\DError', $error);
        $this->assertSame(DError::TYPE_ASSERTION, $error->getType());
    }

    /**
     * @covers app\decibel\debug\DError::createFromException
     */
    public function testCreateFromException_Exception()
    {
        $exception = new Exception('Testing Exception');
        $error = DError::createFromException($exception);
        $this->assertInstanceOf('app\\decibel\\debug\\DError', $error);
        $this->assertSame(DError::TYPE_EXCEPTION, $error->getType());
        // Created 5 lines up...
        $this->assertSame(__LINE__ - 5, $error->getLine());
        $this->assertSame(__FILE__, $error->getFile());
        $this->assertSame('Exception: Testing Exception', $error->getMessage());
        $this->assertStringStartsWith('#0 [internal function]: tests\app\decibel\debug\DErrorTest->testCreateFromException_Exception()',
                                      $error->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DError::createFromException
     */
    public function testCreateFromException_DException()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $exception = new DDeprecatedException('Testing', 'Exception');
        $error = DError::createFromException($exception);
        $this->assertInstanceOf('app\\decibel\\debug\\DError', $error);
        $this->assertSame(DError::TYPE_EXCEPTION, $error->getType());
        // Created 5 lines up...
        // Not working?
        //		$this->assertSame(__LINE__ - 5, $error->getLine());
        //		$this->assertSame(__FILE__, $error->getFile());
        $this->assertSame('app\\decibel\\debug\\DDeprecatedException: <code>Testing</code> has been deprecated in favour of <code>Exception</code>',
                          $error->getMessage());
        $this->assertStringStartsWith('#0 [internal function]: tests\app\decibel\debug\DErrorTest->testCreateFromException_DException()',
                                      $error->getBacktrace());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_assertion()
    {
        $error = new DError(DError::TYPE_ASSERTION);
        $this->assertSame('Assertion', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_notice()
    {
        $error = new DError(DError::TYPE_NOTICE);
        $this->assertSame('Notice', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_warning()
    {
        $error = new DError(DError::TYPE_WARNING);
        $this->assertSame('Warning', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_error()
    {
        $error = new DError(DError::TYPE_ERROR);
        $this->assertSame('Error', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_exception()
    {
        $error = new DError(DError::TYPE_EXCEPTION);
        $this->assertSame('Unhandled Exception', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_handledException()
    {
        $error = new DError(DError::TYPE_HANDLED_EXCEPTION);
        $this->assertSame('Handled Exception', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_deprecated()
    {
        $error = new DError(DError::TYPE_DEPRECATED);
        $this->assertSame('Deprecated', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::getTypeName
     */
    public function testgetTypeName_strictStandards()
    {
        $error = new DError(DError::TYPE_STRICT);
        $this->assertSame('Strict Standards', $error->getTypeName());
    }

    /**
     * @covers app\decibel\debug\DError::isException
     */
    public function testisException()
    {
        $error = new DError(DError::TYPE_ASSERTION);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_NOTICE);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_WARNING);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_ERROR);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_DEPRECATED);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_STRICT);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_FATAL);
        $this->assertFalse($error->isException());
        $error->setType(DError::TYPE_EXCEPTION);
        $this->assertTrue($error->isException());
        $error->setType(DError::TYPE_HANDLED_EXCEPTION);
        $this->assertTrue($error->isException());
    }

    /**
     * @covers app\decibel\debug\DError::setType
     * @covers app\decibel\debug\DError::getType
     */
    public function testsetType()
    {
        $error = new DError(DError::TYPE_ASSERTION);
        $this->assertSame(DError::TYPE_ASSERTION, $error->getType());
        $this->assertSame($error, $error->setType(DError::TYPE_NOTICE));
        $this->assertSame(DError::TYPE_NOTICE, $error->getType());
    }
}
