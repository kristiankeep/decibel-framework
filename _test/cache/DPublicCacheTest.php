<?php
namespace tests\app\decibel\cache;

use app\decibel\cache\debug\DKeyTooLongException;
use app\decibel\cache\DPublicCache;
use app\decibel\security\DDefaultSecurityPolicy;
use app\decibel\test\DTestCase;
use stdClass;

class TestPublicCache extends DPublicCache
{
    public function testSerializeValue($value)
    {
        return $this->serializeValue($value);
    }
}

/**
 * Test class for DPublicCache.
 * Generated by Decibel on 2011-10-31 at 14:07:34.
 */
class DPublicCacheTest extends DTestCase
{
    /**
     * @covers app\decibel\cache\DPublicCache::load
     */
    public function testCreate()
    {
        $cache = DPublicCache::load();
        $this->assertInstanceOf('app\\decibel\\cache\\DPublicCache', $cache);
    }

    /**
     * @covers app\decibel\cache\DPublicCache::serializeValue
     */
    public function testSerializeValue()
    {
        $cache = TestPublicCache::load();
        $value1 = new stdClass();
        $this->assertNotSame($value1, $cache->testSerializeValue($value1));
        $value2 = 'test';
        $this->assertSame($value2, $cache->testSerializeValue($value2));
    }

    /**
     * @covers app\decibel\cache\DPublicCache::remove
     */
    //	public function testremove_invalidator() {
    //		// Generate random invalidator, keys and values.
    //		$policy = new DDefaultSecurityPolicy();
    //		$invalidatorKey = $policy->generateRandomPassword();
    //		$id1 = $policy->generateRandomPassword();
    //		$value1 = $policy->generateRandomPassword();
    //		$id2 = $policy->generateRandomPassword();
    //		$value2 = $policy->generateRandomPassword();
    //		// Set, retrieve and remove.
    //		$cache = DPublicCache::load();
    //		$this->assertNull($cache->retrieve($invalidatorKey, $id1));
    //		$this->assertNull($cache->retrieve($invalidatorKey, $id2));
    //		$this->assertTrue($cache->set($invalidatorKey, $id1, $value1));
    //		$this->assertTrue($cache->set($invalidatorKey, $id2, $value2));
    //		$this->assertSame($value1, $cache->retrieve($invalidatorKey, $id1));
    //		$this->assertSame($value2, $cache->retrieve($invalidatorKey, $id2));
    //		$this->assertTrue($cache->remove($invalidatorKey));
    //		$this->assertNull($cache->retrieve($invalidatorKey, $id1));
    //		$this->assertNull($cache->retrieve($invalidatorKey, $id2));
    //	}
    /**
     * @covers app\decibel\cache\DPublicCache::set
     */
    //	public function testset_expiry() {
    //		// Generate random invalidator, key and value.
    //		$policy = new DDefaultSecurityPolicy();
    //		$invalidatorKey = $policy->generateRandomPassword();
    //		$id = $policy->generateRandomPassword();
    //		$value = $policy->generateRandomPassword();
    //		// Set with expiry in 2 seconds.
    //		$cache = DPublicCache::load();
    //		$this->assertNull($cache->retrieve($invalidatorKey, $id));
    //		$this->assertTrue($cache->set($invalidatorKey, $id, $value, time() + 1));
    //		// Should still be there...
    //		$this->assertSame($value, $cache->retrieve($invalidatorKey, $id));
    //		// ...sleep for 2 seconds...
    //		$this->assertSame(0, sleep(2));
    //		// But not anymore!
    //		$this->assertNull($cache->retrieve($invalidatorKey, $id));
    //	}

    /**
     * @covers app\decibel\cache\DPublicCache::set
     * @covers app\decibel\cache\debug\DKeyTooLongException::__construct
     */
    public function testSetLongKeyThrowsException()
    {
        $this->setExpectedException(DKeyTooLongException::class);

        $key = str_repeat('a', 201);
        $cache = DPublicCache::load();
        $cache->set('invalidator', $key, 'value');
    }

    /**
     * @covers app\decibel\cache\DPublicCache::retrieve
     */
    public function testRetrieveFromEmptyCache()
    {
        $cache = DPublicCache::load();
        $this->assertNull($cache->retrieve('invalidator', uniqid()));
    }

    /**
     * @covers app\decibel\cache\DPublicCache::set
     */
    public function testSet()
    {
        $key = uniqid();
        $cache = DPublicCache::load();

        $result = $cache->set('invalidator', $key, 'value');
        $this->assertFalse($result);

    }
}
