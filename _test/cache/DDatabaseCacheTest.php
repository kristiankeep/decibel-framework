<?php
namespace tests\app\decibel\cache;

use app\decibel\cache\DDatabaseCache;
use app\decibel\cache\debug\DKeyTooLongException;
use app\decibel\health\DHealthCheckResult;
use app\decibel\security\DDefaultSecurityPolicy;
use app\decibel\test\DTestCase;

class TestDatabaseCache extends DDatabaseCache
{
    public function testgetValue($key)
    {
        return $this->getValue($key);
    }

    public function testremoveValue($key)
    {
        return $this->removeValue($key);
    }

    public function testsetValue($key, $value, $expiry = 0)
    {
        return $this->setValue($key, $value, $expiry);
    }
}

/**
 * Test class for DDatabaseCache.
 * Generated by Decibel on 2011-10-31 at 14:07:34.
 */
class DDatabaseCacheTest extends DTestCase
{
    /**
     * @covers app\decibel\cache\DDatabaseCache::isAvailable
     */
    public function testisAvailable()
    {
        $this->assertTrue(DDatabaseCache::isAvailable());
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::isRequired
     */
    public function testisRequired()
    {
        $this->assertFalse(DDatabaseCache::isRequired());
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::getConfigurationClass
     */
    public function testgetConfigurationClass()
    {
        $this->assertNull(DDatabaseCache::getConfigurationClass());
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::getDescription
     */
    public function testgetDescription()
    {
        $this->assertLabel(DDatabaseCache::getDescription(), 'description', 'app\\decibel\\cache\\DDatabaseCache');
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::getDisplayName
     */
    public function testgetDisplayName()
    {
        $this->assertLabel(DDatabaseCache::getDisplayName(), 'displayName', 'app\\decibel\\cache\\DDatabaseCache');
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::supportsClustering
     */
    public function testsupportsClustering()
    {
        $cache = DDatabaseCache::load();
        $this->assertTrue($cache->supportsClustering());
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::test
     */
    public function testtest()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $cache = DDatabaseCache::load();
        $result = $cache->test();
        $this->assertInstanceOf('app\\decibel\\utility\\DResult', $result);
        $this->assertTrue($result->isSuccessful());
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::setValue
     * @covers app\decibel\cache\DDatabaseCache::getValue
     * @covers app\decibel\cache\DDatabaseCache::removeValue
     */
    public function testSetValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        // Generate random invalidator, key and value.
        $policy = new DDefaultSecurityPolicy();
        $key = $policy->generateRandomPassword();
        $value = $policy->generateRandomPassword();
        // Set, retrieve and remove.
        $cache = TestDatabaseCache::load();
        $this->assertNull($cache->getValue($key));
        $this->assertTrue($cache->setValue($key, $value));
        $this->assertSame($value, $cache->getValue($key));
        $this->assertTrue($cache->removeValue($key));
        $this->assertNull($cache->getValue($key));
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::setValue
     * @covers app\decibel\cache\DDatabaseCache::getValue
     */
    public function testValueExpiry()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        // Generate random invalidator, key and value.
        $policy = new DDefaultSecurityPolicy();
        $key = $policy->generateRandomPassword();
        $value = $policy->generateRandomPassword();
        // Set, retrieve and remove.
        $cache = TestDatabaseCache::load();
        $this->assertNull($cache->getValue($key));
        $this->assertTrue($cache->setValue($key, $value, time() + 1));
        // Should still be there...
        $this->assertSame($value, $cache->getValue($key));
        // ...sleep for 2 seconds...
        $this->assertSame(0, sleep(2));
        // But not anymore!
        $this->assertNull($cache->getValue($key));
        $this->assertTrue($cache->removeValue($key));
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::setValue
     */
    public function testsetValue_keyTooLong()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $this->setExpectedException(DKeyTooLongException::class);

        $key = str_repeat('a', 251);
        $cache = TestDatabaseCache::load();
        $cache->setValue($key, 'value');
    }

    /**
     * @covers app\decibel\cache\DDatabaseCache::setValue
     */
    public function testset_maxKey()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $key = str_repeat('a', 250);
        $cache = TestDatabaseCache::load();
        $this->assertTrue($cache->setValue($key, 'value'));
        $this->assertSame('value', $cache->getValue($key));
        $this->assertTrue($cache->removeValue($key));
    }
}
