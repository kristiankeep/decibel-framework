<?php
namespace tests\app\decibel\file;

use app\decibel\file\DFile;
use app\decibel\file\DFileExistsException;
use app\decibel\file\DFileNotFoundException;
use app\decibel\file\DLocalFileSystem;
use app\decibel\test\DTestCase;
use ParentIterator;
use RecursiveArrayIterator;
use RecursiveIteratorIterator;
use stdClass;

/**
 * Test class for DLocalFileSystem.
 * Generated by Decibel on 2011-10-31 at 14:10:16.
 */
class DLocalFileSystemTest extends DTestCase
{
    /** @var string */
    private $filename;

    /** @var string */
    private $fixtureDir;

    public function setUp()
    {
        // tests temporarily disabled due to danger when TEMP_PATH is
        // unset.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $content = uniqid();
        $filename = DECIBEL_PATH . '_build/testCase-DLocalFileSystemTest-' . uniqid();

        // create testfile
        file_put_contents($filename, $content);

        $this->filename = $filename;
        $this->fixtureDir = DFile::correctSlashFor('_test/_fixtures/');
    }

    public function tearDown()
    {
        unlink($this->filename);
    }

    public function assertFileStructure($expected, $actual)
    {
        $expectedFiles = array();
        $expectedIterator = \app\decibel\file\DRecursiveFileSystemIterator::getIterator($expected);
        foreach ($expectedIterator as $file) {
            /* @var $file SplFileInfo */
            $expectedFiles[] = array(
                'name' => str_replace($expected, '', $file->getPathname()),
                'size' => $file->getSize(),
            );
        }
        $actualFiles = array();
        $actualIterator = \app\decibel\file\DRecursiveFileSystemIterator::getIterator($actual);
        foreach ($actualIterator as $file) {
            /* @var $file SplFileInfo */
            $actualFiles[] = array(
                'name' => str_replace($actual, '', $file->getPathname()),
                'size' => $file->getSize(),
            );
        }
        $this->assertSame(
            $expectedFiles,
            $actualFiles,
            "File structure at '{$expected}' does not match '{$actual}'"
        );
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::cleanDelete
     */
    public function testcleanDelete()
    {
        $fileSystem = new DLocalFileSystem();
        $path = TEMP_PATH . 'DLocalFileSystemTest_cleanDelete/';
        $level1 = $path . 'level1/';
        $level2 = $level1 . 'level2/';
        $file1 = $level2 . 'test1.txt';
        $file2 = $path . 'test2.txt';
        $this->assertTrue($fileSystem->createFile($file1, 'test1'));
        $this->assertTrue(file_exists($file1));
        $this->assertTrue($fileSystem->createFile($file2, 'test2'));
        $this->assertTrue(file_exists($file2));
        $this->assertTrue($fileSystem->cleanDelete($file1));
        $this->assertFalse(file_exists($file1));
        $this->assertFalse(is_dir($level2));
        $this->assertFalse(is_dir($level1));
        $this->assertTrue(is_dir($path));
        $this->assertTrue(file_exists($file2));
        // Clean up
        $fileSystem->deltree($path);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::copy
     */
    public function testcopy()
    {
        $fileSystem = new DLocalFileSystem();
        $destination = $this->filename . '_copy';

        $this->assertFalse(is_dir($destination));
        $this->assertTrue($fileSystem->copy($this->filename, $destination));
        $this->assertTrue(file_exists($destination));

        // Clean up
        unlink($this->filename . '_copy');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::copy
     */
    public function testCopyBadFilenameThrowsException()
    {
        $this->setExpectedException(DFileNotFoundException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->copy('invalid', 'destination');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::copy
     */
    public function testCopyDestinationExistingThrowsException()
    {
        $this->setExpectedException(DFileExistsException::class);

        $fileSystem = new DLocalFileSystem();
        $source = $destination = $this->fixtureDir . 'csv/test.csv';
        $fileSystem->copy($source, $destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::createFile
     */
    public function testCreateFile()
    {
        $fileSystem = new DLocalFileSystem();
        $filename = DFile::getTempFilename();
        $this->assertTrue($fileSystem->createFile($filename, 'test', true));
        $this->assertSame('test', file_get_contents($filename));
        // Invalid data.
        $this->assertFalse($fileSystem->createFile($filename, new stdClass(), true));
        // Clean up.
        unlink($filename);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::createFile
     */
    public function testcreateFile_exception()
    {
        $this->setExpectedException(DFileExistsException::class);

        $fileSystem = new DLocalFileSystem();
        $filename = DFile::getTempFilename();
        $fileSystem->createFile($filename, 'test');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::delete
     */
    public function testFileDeletion()
    {
        $fileSystem = new DLocalFileSystem();

        $copy = TEMP_PATH . 'DLocalFileSystemTest_delete.csv';
        copy($this->fixtureDir . 'csv/test.csv', $copy);

        $this->assertTrue(file_exists($copy));
        $this->assertTrue($fileSystem->delete($copy));
        $this->assertFalse(file_exists($copy));
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::delete
     */
    public function testDirectoryDeletion()
    {
        $fileSystem = new DLocalFileSystem();

        $directory = TEMP_PATH . 'DLocalFileSystemTest_delete/';
        mkdir($directory);

        $this->assertTrue(is_dir($directory));
        $this->assertTrue($fileSystem->delete($directory));
        $this->assertFalse(is_dir($directory));
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::delete
     */
    public function testDeleteBadFilenameThrowsException()
    {
        $this->setExpectedException(DFileNotFoundException::class);
        $fileSystem = new DLocalFileSystem();
        $fileSystem->delete('invalid');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::deltree
     */
    public function testdeltree()
    {
        $fileSystem = new DLocalFileSystem();
        $destination = TEMP_PATH . 'DLocalFileSystemTest_deltree/';
        $fileSystem->xcopy($this->fixtureDir, $destination);

        $this->assertTrue(is_dir($destination));
        $this->assertFileStructure($this->fixtureDir, $destination);

        $this->assertTrue($fileSystem->deltree($destination));
        $this->assertFalse(is_dir($destination));
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::deltree
     */
    public function testTreeDeleteBadFilenameThrowsException()
    {
        $this->setExpectedException(DFileNotFoundException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->deltree('invalid');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::emptyDirectory
     */
    public function testEmptyDirectory()
    {
        $fileSystem = new DLocalFileSystem();

        $source = $this->fixtureDir . 'csv/';
        $destination = TEMP_PATH . 'DLocalFileSystemTest_emptyDirectory/';
        $fileSystem->xcopy($source, $destination);

        $this->assertTrue(is_dir($destination));
        $this->assertFileStructure($source, $destination);
        $this->assertTrue($fileSystem->emptyDirectory($destination));
        $this->assertTrue(is_dir($destination));
        $this->assertTrue($fileSystem->isDirectoryEmpty($destination));

        // Clean up
        rmdir($destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::emptyDirectory
     */
    public function testEmptyDirectoryBadFilenameThrowsException()
    {
        $this->setExpectedException(DFileNotFoundException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->emptyDirectory('invalid');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::fileExists
     */
    public function testFileExists()
    {
        $fileSystem = new DLocalFileSystem();
        $result = $fileSystem->fileExists($this->fixtureDir . 'txt/hello-world.txt');

        $this->assertInternalType('boolean', $result);
        $this->assertTrue($result);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::isDirectory
     */
    public function testIsDirectory()
    {
        $fileSystem = new DLocalFileSystem();

        $this->assertTrue($fileSystem->isDirectory($this->fixtureDir));
        $this->assertFalse($fileSystem->isDirectory($this->fixtureDir . 'txt/hello-world.txt'));
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::isDirectoryEmpty
     */
    public function testIsDirectoryEmpty()
    {
        $fileSystem = new DLocalFileSystem();

        $source = $this->fixtureDir . 'csv/';
        $destination = TEMP_PATH . 'DLocalFileSystemTest_isDirectoryEmpty/';

        $fileSystem->xcopy($source, $destination);

        $this->assertTrue(is_dir($destination));
        $this->assertFileStructure($source, $destination);
        $this->assertFalse($fileSystem->isDirectoryEmpty($destination));
        $this->assertTrue($fileSystem->emptyDirectory($destination));
        $this->assertTrue($fileSystem->isDirectoryEmpty($destination));

        // Clean up
        rmdir($destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::isDirectoryEmpty
     * @expectedException app\decibel\file\DFileNotFoundException
     */
    public function testisDirectoryEmpty_invalid()
    {
        $fileSystem = new DLocalFileSystem();
        $fileSystem->isDirectoryEmpty('invalid');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::mkdir
     */
    public function testCreateNewDirectory()
    {
        $fileSystem = new DLocalFileSystem();
        $dir = TEMP_PATH . 'DLocalFileSystemTest_mkdir/level1/level2/';

        $this->assertFalse(is_dir($dir));
        $this->assertTrue($fileSystem->mkdir($dir));
        $this->assertTrue(is_dir($dir));

        // Clean up
        $fileSystem->deltree(TEMP_PATH . 'DLocalFileSystemTest_mkdir/');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::mkdir
     */
    public function testCreateDirectoryOnBadDestinationThrowsException()
    {
        $this->setExpectedException(DFileExistsException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->mkdir($this->fixtureDir);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::mkdirForFile
     */
    public function testCreateDirectoryForFile()
    {
        $fileSystem = new DLocalFileSystem();
        $dir = TEMP_PATH . 'DLocalFileSystemTest_mkdirForFile';
        $file = $dir . '/test.csv';
        $this->assertFalse(is_dir($dir));
        $this->assertTrue($fileSystem->mkdirForFile($file));
        $this->assertTrue(is_dir($dir));
        // Clean up
        $fileSystem->deltree($dir);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::mkdirForFile
     */
    public function testCreateDirectoryForFileOnBadDestinationThrowsException()
    {
        $fileSystem = new DLocalFileSystem();

        $this->assertTrue(is_dir($this->fixtureDir . 'csv/'));
        $this->assertTrue($fileSystem->mkdirForFile($this->fixtureDir . 'csv/test.csv'));
        $this->assertTrue(is_dir($this->fixtureDir . 'csv/'));
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::symlink
     */
    public function testCreateSymlink()
    {
        $fileSystem = new DLocalFileSystem();
        $symlink = TEMP_PATH . 'DLocalFileSystemTest_symlink';

        $this->assertTrue($fileSystem->symlink($this->fixtureDir . 'csv/test.csv', $symlink));
        $this->assertTrue(is_link($symlink));

        // Clean up
        unlink($symlink);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::symlink
     */
    public function testsymlink_invalid()
    {
        $this->setExpectedException(DFileNotFoundException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->symlink('invalid', 'destination');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::symlink
     */
    public function testSymlinkSourceToSameDestinationThrowsException()
    {
        $this->setExpectedException(DFileExistsException::class);

        $fileSystem = new DLocalFileSystem();
        $source = $destination = $this->fixtureDir . 'csv/test.csv';
        $fileSystem->symlink($source, $destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::rename
     */
    public function testMoveFile()
    {
        $fileSystem = new DLocalFileSystem();
        $file = $this->fixtureDir . 'csv/test.csv';

        $source = TEMP_PATH . 'DLocalFileSystemTest_rename.csv';
        $destination = TEMP_PATH . 'DLocalFileSystemTest_rename2.csv';

        copy($file, $source);

        $this->assertTrue(file_exists($source));
        $this->assertTrue($fileSystem->rename($source, $destination));
        $this->assertFalse(file_exists($source));
        $this->assertTrue(file_exists($destination));

        // Clean up
        unlink($destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::rename
     * @expectedException app\decibel\file\DFileNotFoundException
     */
    public function testMoveBadFilenameThrowsException()
    {
        $this->setExpectedException(DFileNotFoundException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->rename('invalid', 'new');
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::rename
     */
    public function testMoveSourceSameDestinationThrowsException()
    {
        $this->setExpectedException(DFileExistsException::class);

        $fileSystem = new DLocalFileSystem();
        $source = $destination = $this->fixtureDir . 'csv/test.csv';
        $fileSystem->rename($source, $destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::xcopy
     */
    public function testRecursiveDirectoryCopy()
    {
        $fileSystem = new DLocalFileSystem();

        $destination = TEMP_PATH . 'DLocalFileSystemTest_xcopy/';
        $fileSystem->xcopy($this->fixtureDir, $destination);

        $this->assertTrue(is_dir($destination));
        $this->assertFileStructure($this->fixtureDir, $destination);

        // Clean up
        $fileSystem->deltree($destination);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::xcopy
     */
    public function testRecursiveCopyBadFilenameThrowsException()
    {
        $this->setExpectedException(DFileNotFoundException::class);

        $fileSystem = new DLocalFileSystem();
        $fileSystem->xcopy('invalid', TEMP_PATH);
    }

    /**
     * @covers app\decibel\file\DLocalFileSystem::xmove
     */
    public function testMoveDirectory()
    {
        $fileSystem = new DLocalFileSystem();

        // First make a copy of something to move!
        $tempCopy = TEMP_PATH . 'DLocalFileSystemTest_xcopy/';
        $fileSystem->xcopy($this->fixtureDir, $tempCopy);

        $this->assertTrue(is_dir($tempCopy));
        $this->assertFileStructure($this->fixtureDir, $tempCopy);

        // Now move it.
        $destination = TEMP_PATH . 'DLocalFileSystemTest_xmove/';
        $fileSystem->xmove($tempCopy, $destination);

        $this->assertFalse(is_dir($tempCopy));
        $this->assertTrue(is_dir($destination));

        $this->assertFileStructure($this->fixtureDir, $destination);

        // Clean up
        $fileSystem->deltree($destination);
    }
}
