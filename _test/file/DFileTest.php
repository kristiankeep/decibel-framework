<?php
namespace tests\app\decibel\file;

use app\decibel\file\DFile;
use app\decibel\test\DTestCase;

/**
 * Test class for DFile.
 * Generated by Decibel on 2012-04-12 at 09:08:27.
 */
class DFileTest extends DTestCase
{
    /**
     * @covers app\decibel\file\DFile::getTempFilename
     */
    public function testgetTempFilename()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $filename = DFile::getTempFilename();
        $this->assertInternalType('string', $filename);
        $this->assertStringStartsWith(TEMP_PATH . '~', $filename);
        $this->assertStringEndsWith('.tmp', $filename);
    }

    /**
     * Difficult to test this, as we can't manipulate
     * the post_max_size ini setting.
     *
     * @covers app\decibel\file\DFile::getMaxUploadSize
     */
    public function testgetMaxUploadSize()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $maxUpload = DFile::stringToBytes(ini_get('upload_max_filesize'));
        $maxPost = DFile::stringToBytes(ini_get('post_max_size'));
        $max = max(array($maxUpload, $maxPost));
        $this->assertSame($max, DFile::getMaxUploadSize());
    }

    /**
     * @covers app\decibel\file\DFile::bytesToString
     */
    public function testbytesToString()
    {
        $this->assertSame('1 bytes', DFile::bytesToString(1));
        $this->assertSame('-1 bytes', DFile::bytesToString(-1));
        $this->assertSame('10 bytes', DFile::bytesToString(10));
        $this->assertSame('-10 bytes', DFile::bytesToString(-10));
        $this->assertSame('100 bytes', DFile::bytesToString(100));
        $this->assertSame('-100 bytes', DFile::bytesToString(-100));
        $this->assertSame('1000 bytes', DFile::bytesToString(1000));
        $this->assertSame('-1000 bytes', DFile::bytesToString(-1000));
        $this->assertSame('1 kb', DFile::bytesToString(1024));
        $this->assertSame('-1 kb', DFile::bytesToString(-1024));
        $this->assertSame('9.8 kb', DFile::bytesToString(10000));
        $this->assertSame('-9.8 kb', DFile::bytesToString(-10000));
        $this->assertSame('97.7 kb', DFile::bytesToString(100000));
        $this->assertSame('-97.7 kb', DFile::bytesToString(-100000));
        $this->assertSame('976.6 kb', DFile::bytesToString(1000000));
        $this->assertSame('-976.6 kb', DFile::bytesToString(-1000000));
        $this->assertSame('1 mb', DFile::bytesToString(1048576));
        $this->assertSame('-1 mb', DFile::bytesToString(-1048576));
        $this->assertSame('9.5 mb', DFile::bytesToString(10000000));
        $this->assertSame('-9.5 mb', DFile::bytesToString(-10000000));
        $this->assertSame('95.4 mb', DFile::bytesToString(100000000));
        $this->assertSame('-95.4 mb', DFile::bytesToString(-100000000));
        $this->assertSame('953.7 mb', DFile::bytesToString(1000000000));
        $this->assertSame('-953.7 mb', DFile::bytesToString(-1000000000));
        $this->assertSame('1 gb', DFile::bytesToString(1073741824));
        $this->assertSame('-1 gb', DFile::bytesToString(-1073741824));
        $this->assertSame('9.3 gb', DFile::bytesToString(10000000000));
        $this->assertSame('-9.3 gb', DFile::bytesToString(-10000000000));
        $this->assertSame('931.3 gb', DFile::bytesToString(1000000000000));
        $this->assertSame('-931.3 gb', DFile::bytesToString(-1000000000000));
        $this->assertSame('1 tb', DFile::bytesToString(1099511627776));
        $this->assertSame('-1 tb', DFile::bytesToString(-1099511627776));
        $this->assertSame('9.1 tb', DFile::bytesToString(10000000000000));
        $this->assertSame('-9.1 tb', DFile::bytesToString(-10000000000000));
    }

    /**
     * @covers app\decibel\file\DFile::stringToBytes
     * @covers app\decibel\file\DFile::getUnitMultiplier
     */
    public function teststringToBytes()
    {
        $this->assertNull(DFile::stringToBytes('test'));
        $this->assertNull(DFile::stringToBytes('10 things'));
        $this->assertSame(10, DFile::stringToBytes('10'));
        $this->assertSame(1, DFile::stringToBytes('1 b'));
        $this->assertSame(1, DFile::stringToBytes('1 byte'));
        $this->assertSame(1, DFile::stringToBytes('1 bytes'));
        $this->assertSame(10, DFile::stringToBytes('10 bytes'));
        $this->assertSame(100, DFile::stringToBytes('100 bytes'));
        $this->assertSame(1000, DFile::stringToBytes('1000 bytes'));
        $this->assertSame(1024, DFile::stringToBytes('1 kb'));
        $this->assertSame(9216, DFile::stringToBytes('9.8 kb'));
        $this->assertSame(99328, DFile::stringToBytes('97.7 kb'));
        $this->assertSame(999424, DFile::stringToBytes('976.6 kb'));
        $this->assertSame(1048576, DFile::stringToBytes('1 mb'));
        $this->assertSame(1048576, DFile::stringToBytes('1 m'));
        $this->assertSame(9437184, DFile::stringToBytes('9.5 mb'));
        $this->assertSame(9437184, DFile::stringToBytes('9.5 m'));
        $this->assertSame(99614720, DFile::stringToBytes('95.4 mb'));
        $this->assertSame(99614720, DFile::stringToBytes('95.4 m'));
        $this->assertSame(999292928, DFile::stringToBytes('953.7 mb'));
        $this->assertSame(999292928, DFile::stringToBytes('953.7 m'));
        $this->assertSame(1073741824, DFile::stringToBytes('1 gb'));
        $this->assertSame(9663676416, DFile::stringToBytes('9.3 gb'));
        $this->assertSame(999653638144, DFile::stringToBytes('931.3 gb'));
        $this->assertSame(1099511627776, DFile::stringToBytes('1 tb'));
        $this->assertSame(9895604649984, DFile::stringToBytes('9.1 tb'));
    }

    /**
     * @requires OS WIN32|WINNT
     * @covers app\decibel\file\DFile::correctSlashFor
     */
    public function testWindowsCorrectSlashFor()
    {
        $this->assertSame('C:\\Program Files\\Decibel', DFile::correctSlashFor('C:/Program Files/Decibel'));
    }

    /**
     * @requires OS Linux
     * @covers app\decibel\file\DFile::correctSlashFor
     */
    public function testLinuxCorrectSlashFor()
    {
        $this->assertSame('/etc/local', DFile::correctSlashFor('\\etc\\local'));
    }
}
