<?php
namespace tests\app\decibel\test;

use app\decibel\database\debug\DQuerySyntaxException;
use app\decibel\test\DQueryTester;
use app\decibel\test\DTestCase;

/**
 * Test class for DQueryTester.
 * Generated by Decibel on 2011-10-31 at 14:08:29.
 */
class DQueryTesterTest extends DTestCase
{
    /**
     * @covers app\decibel\test\DQueryTester::__construct
     * @covers app\decibel\test\DQueryTester::create
     * @covers app\decibel\test\DQueryTester::getQuery
     * @covers app\decibel\test\DQueryTester::getNextRow
     * @covers app\decibel\test\DQueryTester::getNumRows
     * @covers app\decibel\test\DQueryTester::reset
     */
    public function testcreate()
    {
        $result = DQueryTester::create(
            'SQL',
            array('column1', 'column2'),
            array(
                array(1, 2),
                array(3, 4),
            )
        );
        $this->assertInstanceOf('app\\decibel\\test\\DQueryTester', $result);
        $this->assertSame('SQL', $result->getQuery());
        $this->assertSame(2, $result->getNumRows());
        $this->assertSame(array('column1' => 1, 'column2' => 2), $result->getNextRow());
        $this->assertSame(array('column1' => 3, 'column2' => 4), $result->getNextRow());
        $this->assertNull($result->getNextRow());
        $result->reset();
        $this->assertSame(array('column1' => 1, 'column2' => 2), $result->getNextRow());
    }

    /**
     * @covers app\decibel\test\DQueryTester::__construct
     * @covers app\decibel\test\DQueryTester::create
     * @expectedException app\decibel\test\DInvalidResultsException
     */
    public function testcreate_invalidCount()
    {
        DQueryTester::create(
            'SQL',
            array('column1', 'column2'),
            array(
                array(1, 2),
                array(3, 4, 5),
            )
        );
    }

    /**
     * @covers app\decibel\test\DQueryTester::__construct
     * @covers app\decibel\test\DQueryTester::create
     * @expectedException app\decibel\test\DInvalidResultsException
     */
    public function testcreate_invalidType()
    {
        DQueryTester::create(
            'SQL',
            array('column1', 'column2'),
            array(
                array(1, 2),
                3,
            )
        );
    }

    /**
     * @covers app\decibel\test\DQueryTester::setErrorState
     * @covers app\decibel\test\DQueryTester::getError
     */
    public function testsetErrorState()
    {
        $tester = DQueryTester::create('SQL')
                              ->setErrorState();
        $this->assertInstanceOf('app\\decibel\\database\\debug\\DDatabaseException', $tester->getError());
    }

    /**
     * @covers app\decibel\test\DQueryTester::setErrorState
     * @covers app\decibel\test\DQueryTester::getError
     */
    public function testsetErrorState_specific()
    {
        $tester = DQueryTester::create('SQL')
                              ->setErrorState(new DQuerySyntaxException(2000, 'Invalid query syntax.'));
        $this->assertInstanceOf('app\\decibel\\database\\debug\\DQuerySyntaxException', $tester->getError());
    }

    /**
     * @covers app\decibel\test\DQueryTester::expectParameters
     * @covers app\decibel\test\DQueryTester::getExpectedParameters
     */
    public function testsetExpectParameters_single()
    {
        $tester = DQueryTester::create('SQL')
                              ->expectParameters(array('param' => 'value'));
        $this->assertSame(array('param' => 'value'), $tester->getExpectedParameters());
        $this->assertNull($tester->getExpectedParameters());
    }

    /**
     * @covers app\decibel\test\DQueryTester::expectParameters
     * @covers app\decibel\test\DQueryTester::getExpectedParameters
     */
    public function testsetExpectParameters_multiple()
    {
        $tester = DQueryTester::create('SQL')
                              ->expectParameters(
                                  array('param' => 'value1'),
                                  array('param' => 'value2')
                              );
        $this->assertSame(array('param' => 'value1'), $tester->getExpectedParameters());
        $this->assertSame(array('param' => 'value2'), $tester->getExpectedParameters());
        $this->assertNull($tester->getExpectedParameters());
    }

    /**
     * @covers app\decibel\test\DQueryTester::expectParameters
     * @covers app\decibel\test\DQueryTester::getExpectedParameters
     */
    public function testsetExpectParameters_none()
    {
        $tester = DQueryTester::create('SQL')
                              ->expectParameters();
        $this->assertNull($tester->getExpectedParameters());
    }
}
