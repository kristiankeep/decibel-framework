<?php
namespace tests\app\decibel\registry;

use app\decibel\application\DApp;
use app\decibel\Decibel;
use app\decibel\file\DFile;
use app\decibel\registry\DAppRegistry;
use app\decibel\registry\DClassInformation;
use app\decibel\registry\DFileInformation;
use app\decibel\registry\DGlobalRegistry;
use app\decibel\registry\DInvalidDependencyException;
use app\decibel\registry\DRegistryHive;
use app\decibel\test\DTestCase;
use PHPUnit_Framework_TestCase;

/**
 * Test class for DRegistryHive.
 * Generated by Decibel on 2011-10-31 at 14:12:38.
 */
class DRegistryHiveTest extends PHPUnit_Framework_TestCase
{
    /** @var DGlobalRegistry */
    private $registry;

    /**
     *
     */
    public function setUp()
    {
        $this->registry = DGlobalRegistry::load();
    }
    /**
     * @covers app\decibel\registry\DRegistryHive::__construct
     * @covers app\decibel\registry\DRegistryHive::initialise
     */
    public function testGlobalRegistryInitialiseDoesNotRebuild()
    {
        $information = new DFileInformation($this->registry);
        $this->assertFalse($information->isUpdated());
    }

    /**
     * @covers app\decibel\registry\DRegistryHive::getDependency
     */
    public function testGetBadDependencyThrowsException()
    {
        $this->setExpectedException(DInvalidDependencyException::class);
        // DFileInformation does not have dependencies
        $information = new DFileInformation($this->registry);
        // and should never have DClassInformation
        // as it would become circular
        $information->getDependency(DClassInformation::class);
    }

    /**
     * @covers app\decibel\registry\DRegistryHive::getDependencies
     */
    public function testGetDependencies()
    {
        $registry = new DFileInformation($this->registry);
        $this->assertEmpty($registry->getDependencies());
    }

    /**
     * Tests the hasUpdatedDependency by initialising DClassInformation
     *
     * @covers app\decibel\registry\DRegistryHive::hasUpdatedDependency
     */
    public function testHasUpdatedDependency()
    {
        $information = new DFileInformation($this->registry);
        $this->assertFalse($information->hasUpdatedDependency());
    }

    /**
     * @covers app\decibel\registry\DRegistryHive::getRegistry
     */
    public function testGetRegistry()
    {
        $information = new DFileInformation($this->registry);
        $this->assertInstanceOf(DGlobalRegistry::class, $information->getRegistry());
    }

    /**
     * @covers app\decibel\registry\DRegistryHive::isUpdated
     * @covers app\decibel\registry\DRegistryHive::requiresRebuild
     */
    public function testRequiresRebuild()
    {
        $information = new DFileInformation($this->registry);
        // will be true as the format version is not set yet
        $this->assertTrue($information->requiresRebuild());

        // only way to test that the rebuild does not require
        // a rebuild after a rebuild is to run the rebuild
        $appRegistry = $this->getAppRegistry();
        $information->initialise($appRegistry);

        $this->assertTrue($information->isUpdated());
    }

    /**
     * @return DAppRegistry
     */
    private function getAppRegistry()
    {
        $app = new Decibel();
        $appRegistry = DAppRegistry::load($app->setRelativePath(''));
        return $appRegistry;
    }
}
