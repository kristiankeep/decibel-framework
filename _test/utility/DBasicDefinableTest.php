<?php
namespace tests\app\decibel\utility;

use app\decibel\regional\DLabel;
use app\decibel\test\DTestCase;
use app\decibel\utility\DBasicDefinable;

class TestBasicDefinable
{
    use DBasicDefinable;
    protected $property1 = 'default1';
    protected $property2 = 'default2';

    public function setProperty2($value)
    {
        $this->property2 = $value;

        return $this;
    }

    public function getProperty2()
    {
        return $this->property2;
    }

    public function testSetArray($name, $value, $allowNull = false, $expected = null)
    {
        return $this->setArray($name, $value, $allowNull, $expected);
    }

    public function testSetBoolean($name, $value, $allowNull = false, $expected = null)
    {
        return $this->setBoolean($name, $value, $allowNull, $expected);
    }

    public function testSetEnum($name, $value, array $values, $allowNull = false, $expected = null)
    {
        return $this->setEnum($name, $value, $values, $allowNull, $expected);
    }

    public function testSetInteger($name, $value, $allowNull = false, $expected = null)
    {
        return $this->setInteger($name, $value, $allowNull, $expected);
    }

    public function testSetLabel($name, $value, $allowString = true)
    {
        return $this->setLabel($name, $value, $allowString);
    }
}

/**
 * Test class for DStringField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DStringFieldTest extends DTestCase
{
    /**
     * @covers app\decibel\utility\DBasicDefinable::__get
     */
    public function test__get()
    {
        $definable = new TestBasicDefinable();
        $this->assertSame('default1', $definable->property1);
        $this->assertSame('default2', $definable->property2);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::__get
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__get_invalid()
    {
        $definable = new TestBasicDefinable();
        $definable->property3;
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::__set
     */
    public function test__set()
    {
        $definable = new TestBasicDefinable();
        $definable->property1 = 'test1';
        $definable->property2 = 'test2';
        $this->assertSame('test1', $definable->property1);
        $this->assertSame('test2', $definable->property2);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::__set
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__set_invalid()
    {
        $definable = new TestBasicDefinable();
        $definable->property3 = 'test';
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setArray
     */
    public function testsetArray()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetArray('property1', array(1, 2, 3));
        $this->assertSame(array(1, 2, 3), $definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setArray
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetArray_invalid()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetArray('property1', 1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setArray
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetArray_invalid_allowNull()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetArray('property1', 1, true);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setArray
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetArray_invalidNull()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetArray('property1', null);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setArray
     */
    public function testsetArray_null()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetArray('property1', null, true);
        $this->assertNull($definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setBoolean
     */
    public function testsetBoolean()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetBoolean('property1', true);
        $this->assertTrue($definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setBoolean
     */
    public function testsetBoolean_null()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetBoolean('property1', null, true);
        $this->assertNull($definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setBoolean
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetBoolean_invalid()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetBoolean('property1', 100);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setBoolean
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetBoolean_invalidNull()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetBoolean('property1', null);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setEnum
     */
    public function testsetEnum()
    {
        $values = array(
            'option1' => 'value1',
            'option2' => 'value2',
        );
        $definable = new TestBasicDefinable();
        $definable->testSetEnum('property1', 'option1', $values);
        $this->assertSame('option1', $definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setEnum
     */
    public function testsetEnum_null()
    {
        $values = array(
            'option1' => 'value1',
            'option2' => 'value2',
        );
        $definable = new TestBasicDefinable();
        $definable->testSetEnum('property1', null, $values, true);
        $this->assertNull($definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setEnum
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetEnum_invalid()
    {
        $values = array(
            'option1' => 'value1',
            'option2' => 'value2',
        );
        $definable = new TestBasicDefinable();
        $definable->testSetEnum('property1', 100, $values);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setEnum
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetEnum_invalidNull()
    {
        $values = array(
            'option1' => 'value1',
            'option2' => 'value2',
        );
        $definable = new TestBasicDefinable();
        $definable->testSetEnum('property1', null, $values);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setInteger
     */
    public function testsetInteger()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetInteger('property1', 10);
        $this->assertSame(10, $definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setInteger
     */
    public function testsetInteger_null()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetInteger('property1', null, true);
        $this->assertNull($definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setInteger
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetInteger_invalid()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetInteger('property1', 10.1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setInteger
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetInteger_invalidNull()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetInteger('property1', null);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setLabel
     */
    public function testsetLabel()
    {
        $label = new DLabel('app\decibel', 'yes');
        $definable = new TestBasicDefinable();
        $definable->testSetLabel('property1', $label);
        $this->assertSame($label, $definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setLabel
     */
    public function testsetLabel_string()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetLabel('property1', 'label');
        $this->assertSame('label', $definable->property1);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setLabel
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetLabel_invalid()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetLabel('property1', 10);
    }

    /**
     * @covers app\decibel\utility\DBasicDefinable::setLabel
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetLabel_invalidString()
    {
        $definable = new TestBasicDefinable();
        $definable->testSetLabel('property1', 'label', false);
    }
}
