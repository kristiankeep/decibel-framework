<?php
namespace tests\app\decibel\utility;

use app\decibel\model\field\DTextField;
use app\decibel\test\DTestCase;
use app\decibel\utility\DUtilityData;

// awaits refactor
return;

class TestUtilityData extends DUtilityData
{
    public function define()
    {
        $title = new DTextField('title', 'Title');
        $this->addField($title);
        $description = new DTextField('description', 'Description');
        $this->addField($description);
    }

    public function __toString()
    {
        return $this->getFieldValue('title');
    }
}

// Used to test deprecated property definition style.
class TestDeprecatedUtilityData extends DUtilityData
{
    // Used to test that getFieldValues ignores static properties.
    public static $staticField;
    protected $title;

    /**
     * Defines fields available for this object.
     * This function should call the {@link DUtilityData::addField()} function.
     * @return    void
     */
    protected function define()
    {
        // TODO: Implement define() method.
    }
}

/**
 * Test class for DUtilityData.
 * Generated by Decibel on 2011-10-31 at 14:13:46.
 */
class DUtilityDataTest extends DTestCase
{
    public function setUp()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers app\decibel\utility\DUtilityData::__construct
     * @covers app\decibel\utility\DUtilityData::__wakeup
     * @covers app\decibel\utility\DUtilityData::define
     */
    public function test__construct()
    {
        $data = new TestUtilityData();
        $this->assertInstanceOf('tests\\app\\decibel\\utility\\TestUtilityData', $data);
        $this->assertNotEmpty($data->getFields());
    }

    /**
     * @covers app\decibel\utility\DUtilityData::__construct
     * @covers app\decibel\utility\DUtilityData::__sleep
     * @covers app\decibel\utility\DUtilityData::__wakeup
     */
    public function testserialization()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $serializedData = serialize($data);
        $unserializedData = unserialize($serializedData);
        $this->assertSame('Title', $unserializedData->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::__get
     */
    public function test__get()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame('Title', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::__set
     */
    public function test__set()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $data = new TestUtilityData();
        $this->assertSame('', $data->getFieldValue('title'));
        $data->title = 'Title';
        $this->assertSame('Title', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::__sleep
     */
    public function test__sleep()
    {
        $data = new TestUtilityData();
        $this->assertSame(array('fieldValues'), $data->__sleep());
    }

    /**
     * @covers app\decibel\utility\DUtilityData::generateDebug
     */
    public function testgenerateDebug()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame(
            array(
                'title'       => 'Title',
                'description' => '',
            ),
            $data->generateDebug()
        );
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getDefinitionName
     */
    public function testgetDefinitionName()
    {
        $this->assertNull(DUtilityData::getDefinitionName());
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getField
     */
    public function testgetField()
    {
        $data = new TestUtilityData();
        $field = $data->getField('title');
        $this->assertInstanceOf('app\\decibel\\model\\field\\DTextField', $field);
        $this->assertSame('title', $field->getName());
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getField
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function testgetFieldInvalid()
    {
        $data = new TestUtilityData();
        $data->getField('invalid');
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldNames
     */
    public function testgetFieldNames()
    {
        $data = new TestUtilityData();
        $this->assertSame(
            array(
                'title',
                'description',
            ),
            $data->getFieldNames()
        );
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldNames
     */
    public function testgetFieldNames_deprecated()
    {
        $data = new TestDeprecatedUtilityData();
        $this->assertSame(array('title'), $data->getFieldNames());
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFields
     */
    public function testgetFields()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $data = new TestUtilityData();
        $fields = $data->getFields();
        $this->assertInternalType('array', $fields);
        $this->assertArrayHasKey('title', $fields);
        $this->assertInstanceOf('app\\decibel\\model\\field\\DTextField', $fields['title']);
        $this->assertSame('title', $fields['title']->getName());
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldValue
     */
    public function testgetFieldValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame('Title', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldValue
     */
    public function testgetFieldValue_default()
    {
        $data = new TestUtilityData();
        $this->assertSame('', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldValue
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function testgetFieldValue_invalidField()
    {
        $data = new TestUtilityData();
        $data->getFieldValue('invalid');
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldValue
     */
    public function testgetFieldValue_deprecated()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $data = new TestDeprecatedUtilityData();
        $data->title = 'Title';
        $this->assertSame('Title', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::getFieldValues
     */
    public function testgetFieldValues()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame(
            array(
                'title'       => 'Title',
                'description' => '',
            ),
            $data->getFieldValues()
        );
    }

    /**
     * @covers app\decibel\utility\DUtilityData::hasField
     */
    public function testhasField()
    {
        $data = new TestUtilityData();
        $this->assertTrue($data->hasField('title'));
        $this->assertFalse($data->hasField('invalid'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::offsetExists
     */
    public function testoffsetExists()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $this->assertTrue(isset($data['title']));
        $this->assertFalse(isset($data['invalid']));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::offsetUnset
     */
    public function testoffsetUnset()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame('Title', $data->getFieldValue('title'));
        unset($data['title']);
        $this->assertSame('', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::offsetGet
     */
    public function testoffsetGet()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame('Title', $data['title']);
    }

    /**
     * @covers app\decibel\utility\DUtilityData::setFieldValue
     */
    public function testsetFieldValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $this->assertNull($data->setFieldValue('title', 'Title'));
        $this->assertSame('Title', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::setFieldValue
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function testsetFieldValue_invalidField()
    {
        $data = new TestUtilityData();
        $data->setFieldValue('invalid', 10);
    }

    /**
     * @covers app\decibel\utility\DUtilityData::setFieldValue
     */
    public function testsetFieldValue_deprecated()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestDeprecatedUtilityData();
        $data->title = 'Title';
        $this->assertSame('Title', $data->getFieldValue('title'));
    }

    /**
     * @covers app\decibel\utility\DUtilityData::toArray
     */
    public function testtoArray()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame(
            array(
                'title'          => 'Title',
                'description'    => '',
                '__toString'     => 'Title',
                '_qualifiedName' => 'tests\\app\\decibel\\utility\\TestUtilityData',
            ),
            $data->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DUtilityData::toArray
     */
    public function testtoArray_deprecated()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestDeprecatedUtilityData();
        $data->setFieldValue('title', 'Title');
        $this->assertSame(
            array(
                'title'          => 'Title',
                '_qualifiedName' => 'tests\\app\\decibel\\utility\\TestDeprecatedUtilityData',
            ),
            $data->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DUtilityData::current
     * @covers app\decibel\utility\DUtilityData::key
     * @covers app\decibel\utility\DUtilityData::next
     * @covers app\decibel\utility\DUtilityData::rewind
     * @covers app\decibel\utility\DUtilityData::valid
     */
    public function testiterator()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $data = new TestUtilityData();
        $data->setFieldValue('title', 'Title');
        $data->setFieldValue('description', 'Description');
        $iteratedData = array();
        foreach ($data as $fieldName => $value) {
            $iteratedData[ $fieldName ] = $value;
        }
        $this->assertSame(
            array(
                'title'       => 'Title',
                'description' => 'Description',
            ),
            $iteratedData
        );
    }
}
