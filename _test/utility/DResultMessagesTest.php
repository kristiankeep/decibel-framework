<?php
namespace tests\app\decibel\utility;

use app\decibel\configuration\DApplicationMode;
use app\decibel\regional\DLabel;
use app\decibel\test\DTestCase;
use app\decibel\utility\DResultMessages;

/**
 * Test class for DResultMessages.
 * Generated by Decibel on 2011-10-31 at 14:13:27.
 */
class DResultMessagesTest extends DTestCase
{
    /**
     * @throws \app\decibel\debug\DInvalidParameterValueException
     */
    public function tearDown()
    {
        DApplicationMode::setMode(DApplicationMode::MODE_TEST);
    }

    /**
     * @covers app\decibel\utility\DResultMessages::__construct
     */
    public function test__construct()
    {
        $messages = new DResultMessages();
        $this->assertSame(array(), $messages->toArray());
    }

    /**
     * @covers app\decibel\utility\DResultMessages::addDebugMessage
     */
    public function testaddDebugMessage()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $messageString = 'MESSAGE';
        $messages = new DResultMessages();
        // Production mode, won't add the message.
        DApplicationMode::setMode(DApplicationMode::MODE_PRODUCTION);
        $this->assertSame($messages, $messages->addDebugMessage($messageString));
        $this->assertSame(
            array(),
            $messages->toArray()
        );
        // Debug mode, will add the message.
        DApplicationMode::setMode(DApplicationMode::MODE_DEBUG);
        $this->assertSame($messages, $messages->addDebugMessage($messageString));
        $this->assertSame(
            array(0 => $messageString),
            $messages->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DResultMessages::addDebugMessages
     */
    public function testaddDebugMessages()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $messages = new DResultMessages();
        // Production mode, won't add the message.
        DApplicationMode::setMode(DApplicationMode::MODE_PRODUCTION);
        $this->assertSame($messages, $messages->addDebugMessages(array('MESSAGE1', 'MESSAGE2')));
        $this->assertSame(
            array(),
            $messages->toArray()
        );
        // Debug mode, will add the message.
        DApplicationMode::setMode(DApplicationMode::MODE_DEBUG);
        $this->assertSame($messages, $messages->addDebugMessages(array('MESSAGE1', 'MESSAGE2')));
        $this->assertSame(
            array(
                0 => 'MESSAGE1',
                1 => 'MESSAGE2',
            ),
            $messages->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DResultMessages::addMessage
     */
    public function testaddMessage()
    {
        $messageString = 'MESSAGE';
        $messageLabel = new DLabel('app\decibel', 'yes');
        $messages = new DResultMessages();
        $this->assertSame(array(), $messages->toArray());
        // String message, without key.
        $this->assertSame($messages, $messages->addMessage($messageString));
        $this->assertSame(
            array(0 => $messageString),
            $messages->toArray()
        );
        // String message, with key.
        $this->assertSame($messages, $messages->addMessage($messageString, 'KEY1'));
        $this->assertSame(
            array(
                0      => $messageString,
                'KEY1' => $messageString,
            ),
            $messages->toArray()
        );
        // Label message, without key.
        $this->assertSame($messages, $messages->addMessage($messageLabel));
        $this->assertSame(
            array(
                0      => $messageString,
                'KEY1' => $messageString,
                2      => $messageLabel,
            ),
            $messages->toArray()
        );
        // Label message, with key.
        $this->assertSame($messages, $messages->addMessage($messageLabel, 'KEY2'));
        $this->assertSame(
            array(
                0      => $messageString,
                'KEY1' => $messageString,
                2      => $messageLabel,
                'KEY2' => $messageLabel,
            ),
            $messages->toArray()
        );
        // Repeated message, without key.
        $this->assertSame($messages, $messages->addMessage($messageString));
        $this->assertSame(
            array(
                0      => $messageString,
                'KEY1' => $messageString,
                2      => $messageLabel,
                'KEY2' => $messageLabel,
            ),
            $messages->toArray()
        );
        // Repeated message, with key.
        $this->assertSame($messages, $messages->addMessage($messageString, 'KEY1'));
        $this->assertSame(
            array(
                0      => $messageString,
                'KEY1' => $messageString,
                2      => $messageLabel,
                'KEY2' => $messageLabel,
            ),
            $messages->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DResultMessages::addMessage
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testaddMessage_invalid()
    {
        $messages = new DResultMessages();
        $messages->addMessage(false);
    }

    /**
     * @covers app\decibel\utility\DResultMessages::addMessages
     */
    public function testAddMessages()
    {
        $messages1 = new DResultMessages();
        $this->assertSame($messages1, $messages1->addMessages(array('MESSAGE1', 'MESSAGE2')));
        $this->assertSame(
            array(
                0 => 'MESSAGE1',
                1 => 'MESSAGE2',
            ),
            $messages1->toArray()
        );
        $messages2 = new DResultMessages();
        $this->assertSame($messages2, $messages2->addMessages(array('KEY1' => 'MESSAGE1', 'MESSAGE2')));
        $this->assertSame(
            array(
                'KEY1' => 'MESSAGE1',
                1      => 'MESSAGE2',
            ),
            $messages2->toArray()
        );
        $messages3 = new DResultMessages();
        $this->assertSame($messages3, $messages3->addMessages(array('MESSAGE1', 'KEY2' => 'MESSAGE2')));
        $this->assertSame(
            array(
                0      => 'MESSAGE1',
                'KEY2' => 'MESSAGE2',
            ),
            $messages3->toArray()
        );
        $messages4 = new DResultMessages();
        $this->assertSame($messages4, $messages4->addMessages(array('MESSAGE1', 'KEY2' => 'MESSAGE2'), 'FIELDNAME'));
        $this->assertSame(
            array(
                'FIELDNAME' => 'MESSAGE1',
                'KEY2'      => 'MESSAGE2',
            ),
            $messages4->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DResultMessages::addMessages
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testaddMessages_invalid()
    {
        $messages = new DResultMessages();
        $messages->addMessages(array('valid', false));
    }

    /**
     * @covers app\decibel\utility\DResultMessages::changeFieldName
     */
    public function testchangeFieldName()
    {
        $messages = new DResultMessages();
        $this->assertFalse($messages->changeFieldName('KEY3', 'KEY4'));
        $this->assertSame($messages, $messages->addMessages(array('KEY1' => 'MESSAGE1', 'KEY2' => 'MESSAGE2')));
        $this->assertFalse($messages->changeFieldName('KEY3', 'KEY4'));
        $this->assertTrue($messages->changeFieldName('KEY1', 'KEY3'));
        $this->assertSame(
            array(
                'KEY2' => 'MESSAGE2',
                'KEY3' => 'MESSAGE1',
            ),
            $messages->toArray()
        );
    }

    /**
     * @covers app\decibel\utility\DResultMessages::clearMessages
     */
    public function testclearMessages()
    {
        $messages = new DResultMessages();
        $this->assertSame($messages, $messages->addMessages(array('KEY1' => 'MESSAGE1', 'KEY2' => 'MESSAGE2')));
        $this->assertSame(
            array(
                'KEY1' => 'MESSAGE1',
                'KEY2' => 'MESSAGE2',
            ),
            $messages->toArray()
        );
        $this->assertSame($messages, $messages->clearMessages());
        $this->assertSame(array(), $messages->toArray());
    }
}
