<?php
namespace tests\app\decibel\decorator;

use app\decibel\decorator\DDecoratable;
use app\decibel\decorator\DDecorator;
use app\decibel\decorator\DDecoratorCache;
use app\decibel\test\DTestCase;

class TestDDecorator extends DDecorator
{
    public function __construct(DDecoratable $decorated)
    {
        parent::__construct($decorated);
    }

    public static function getDecoratedClass()
    {
        return 'app\decibel\decorator\DDecorator';
    }
}

class TestDDecoratable implements DDecoratable
{
    use DDecoratorCache;
    public $testProperty = 'test';

    public function getName()
    {
        return 'test';
    }
}

/**
 * Test class for DEventSubscription.
 * Generated by Decibel on 2011-10-31 at 14:08:29.
 */
class DDecoratorTest extends DTestCase
{
    /**
     * @covers app\decibel\decorator\DDecorator::__construct
     */
    public function test__construct()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $this->assertInstanceOf('app\\decibel\\decorator\\DDecorator', $decorator);
    }

    /**
     * @covers app\decibel\decorator\DDecorator::__call
     */
    public function test__call()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $this->assertSame('test', $decorator->__call('getName', array()));
    }

    /**
     * @covers app\decibel\decorator\DDecorator::__call
     * @expectedException app\decibel\debug\DInvalidMethodException
     */
    public function test__callEexpcetion()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $decorator->__call('getTest', array());
    }

    /**
     * @covers app\decibel\decorator\DDecorator::__get
     */
    public function test__get()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $this->assertSame('test', $decorator->__get('testProperty'));
    }

    /**
     * @covers app\decibel\decorator\DDecorator::__get
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__getEexpcetion()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $decorator->__get('invalidProperty');
    }

    /**
     * @covers app\decibel\decorator\DDecorator::__set
     */
    public function test__set()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $decorator->__set('testProperty', 'Testing');
        $this->assertSame('Testing', $decorator->__get('testProperty'));
    }

    /**
     * @covers app\decibel\decorator\DDecorator::__set
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__setEexpcetion()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $decorator->__set('invalidProperty', 'value');
    }

    /**
     * @covers app\decibel\decorator\DDecorator::decorate
     * @expectedException app\decibel\decorator\DInvalidDecoratorException
     */
    public function testdecorate()
    {
        $object = new TestDDecoratable();
        $this->assertInstanceOf('app\\decibel\\decorator\\DDecorator', TestDDecorator::decorate($object));
    }

    /**
     * @covers app\decibel\decorator\DDecorator::getDecorated
     */
    public function testgetDecorated()
    {
        $object = new TestDDecoratable();
        $decorator = new TestDDecorator($object);
        $this->assertInstanceOf('tests\\app\\decibel\\decorator\\TestDDecoratable', $decorator->getDecorated());
    }
}
