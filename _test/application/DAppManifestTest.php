<?php
namespace tests\app\decibel\application;

use app\decibel\application\DAppManifest;
use app\decibel\application\debug\DMissingAppManifestDataException;
use app\decibel\application\debug\DMissingAppManifestException;
use app\decibel\Decibel;
use app\decibel\packaging\DAppDependency;
use app\decibel\packaging\DDependency;
use app\decibel\packaging\DPhpDependency;
use app\decibel\test\DTestCase;

/**
 * Test class for DAppManifest.
 * Generated by Decibel on 2011-10-31 at 14:04:20.
 */
class DAppManifestTest extends DTestCase
{
    /** @var string */
    private $xmlAppManifestDir;

    public function setUp()
    {
        $this->xmlAppManifestDir = __DIR__ . '/../_fixtures/xml/';
    }

    /**
     * @covers app\decibel\application\DAppManifest::__construct
     * @covers app\decibel\application\DAppManifest::getManifestFilename
     */
    public function testConstructCreatesDecibelAppManifestWithFilename()
    {
        $app = new Decibel();
        $manifest = $app->setRelativePath('')->getManifest();

        $this->assertInstanceOf(DAppManifest::class, $manifest);
        $this->assertSame('Decibel.manifest.xml', $manifest->getFilename());
    }

    /**
     * @covers app\decibel\application\DAppManifest::__construct
     * @covers app\decibel\application\DAppManifest::getFilename
     */
    public function testGetFilename()
    {
        $filename = $this->xmlAppManifestDir . 'manifest.xml';
        $manifest = new DAppManifest(Decibel::class, $filename);

        $this->assertInstanceOf(DAppManifest::class, $manifest);
        $this->assertSame($filename, $manifest->getFilename());
    }

    /**
     * @covers app\decibel\application\DAppManifest::__construct
     */
    public function testAppManifestFileNotFoundThrowsException()
    {
        $this->setExpectedException(DMissingAppManifestException::class);

        new DAppManifest(Decibel::class,
                         $this->xmlAppManifestDir . 'nosuchfile.xml');
    }

    /**
     * @covers app\decibel\application\DAppManifest::getAuthorName
     */
    public function testMissingAuthorNameFallbacksToNull()
    {
        $manifest = new DAppManifest(Decibel::class,
                                     $this->xmlAppManifestDir . 'manifest_invalid.xml');

        $this->assertNull($manifest->getAuthorName());
    }

    /**
     * @covers app\decibel\application\DAppManifest::checkDependencies
     */
    /*public function testCheckDependencies()
    {
        $manifest = new DAppManifest(Decibel::class,
                                     $this->xmlAppManifestDir . 'manifest_invalid.xml');

        $this->assertEmpty($manifest->checkDependencies());
    }*/

    /**
     * @covers app\decibel\application\DAppManifest::getDependencies
     */
    public function testGetDependencies()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $manifest = new DAppManifest(Decibel::class,
                                     $this->xmlAppManifestDir . 'manifest.xml');

        $allDependencies = $manifest->getDependencies();
        $this->assertInternalType('array', $allDependencies);
        $this->assertCount(2, $allDependencies);
        $this->assertContainsOnly(DDependency::class, $allDependencies);

        $phpDependencies = $manifest->getDependencies(DPhpDependency::class);
        $this->assertInternalType('array', $phpDependencies);
        $this->assertCount(1, $phpDependencies);
        $this->assertContainsOnly(DPhpDependency::class, $phpDependencies);

        $appDependencies = $manifest->getDependencies(DAppDependency::class);
        $this->assertInternalType('array', $appDependencies);
        $this->assertCount(1, $appDependencies);
        $this->assertContainsOnly(DAppDependency::class, $appDependencies);
    }

    /**
     * @covers app\decibel\application\DAppManifest::getCopyright
     */
    public function testDefaultCopyrightIsNull()
    {
        $manifest = new DAppManifest(Decibel::class,
                                     $this->xmlAppManifestDir . 'manifest_invalid.xml');

        $this->assertNull($manifest->getCopyright());
    }

    /**
     * @covers app\decibel\application\DAppManifest::getName
     */
    public function testMissingNameThrowsException()
    {
        $this->setExpectedException(DMissingAppManifestDataException::class);

        $manifest = new DAppManifest(Decibel::class,
                                     $this->xmlAppManifestDir . 'manifest_invalid.xml');
        $manifest->getName();
    }

    /**
     * @covers app\decibel\application\DAppManifest::getRepositoryUrl
     */
    public function testDefaultRepositoryUrlIsNull()
    {
        $manifest = new DAppManifest(Decibel::class,
                                     $this->xmlAppManifestDir . 'manifest_invalid.xml');

        $this->assertNull($manifest->getRepositoryUrl());
    }

    /**
     * @covers app\decibel\application\DAppManifest::getUpdateMethod
     */
    public function testGetUpdateMethod()
    {
        $manifest = new DAppManifest(Decibel::class, $this->xmlAppManifestDir . 'manifest.xml');
        $this->assertSame('automatic', $manifest->getUpdateMethod());
    }

    /**
     * @covers app\decibel\application\DAppManifest::getUpdateMethod
     */
    public function testDefaultUpdateMethodIsManual()
    {
        $manifest = new DAppManifest(Decibel::class, $this->xmlAppManifestDir . 'manifest_invalid.xml');
        $this->assertSame('manual', $manifest->getUpdateMethod());
    }

    /**
     * @covers app\decibel\application\DAppManifest::getVersion
     */
    public function testMissingVersionThrowsException()
    {
        $this->setExpectedException(DMissingAppManifestDataException::class);

        $manifest = new DAppManifest(Decibel::class, $this->xmlAppManifestDir . 'manifest_invalid.xml');
        $manifest->getVersion();
    }
}
