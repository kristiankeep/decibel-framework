<?php
namespace tests\app\decibel\application;

use app\decibel\application\DApp;
use app\decibel\application\DAppManifest;
use app\decibel\application\debug\DMissingAppManifestException;
use app\decibel\Decibel;
use app\decibel\regional\DGlobalTranslationScope;
use app\decibel\regional\DTranslationFile;
use app\decibel\registry\DClassInfo;
use app\decibel\test\DTestCase;
use app\decibel\utility\DResult;

class TestApp extends DApp
{
}

/**
 * Test class for DApp.
 * Generated by Decibel on 2011-10-31 at 14:04:14.
 */
class DAppTest extends DTestCase
{
    /**
     * @covers app\decibel\application\DApp::__construct
     * @covers app\decibel\application\DApp::getQualifiedName
     */
    public function testCreateSetsQualifiedName()
    {
        /** @var DApp $app */
        $app = $this->getMockForAbstractClass(DApp::class);
        $this->assertSame(get_class($app), $app->getQualifiedName());
    }

    /**
     * @covers app\decibel\application\DApp::getRelativePath
     */
    public function testGetRelativePath()
    {
        /** @var DApp $app */
        $app = $this->getMockForAbstractClass(DApp::class);
        $defaultRelativePath = dirname(str_replace(NAMESPACE_SEPARATOR,
                                                   DIRECTORY_SEPARATOR, DApp::class))
                             . DIRECTORY_SEPARATOR;
        $this->assertSame($defaultRelativePath, $app->getRelativePath());
    }

    /**
     * @covers app\decibel\application\DApp::setRelativePath
     */
    public function testSetRelativePath()
    {
        /** @var DApp $app */
        $app = $this->getMockForAbstractClass(DApp::class);
        $new = $app->setRelativePath('/');

        $this->assertInstanceOf(DApp::class, $new);
        $this->assertNotSame($app, $new);
        $this->assertSame('/', $new->getRelativePath());
        $this->assertNotSame($app->getRelativePath(), $new->getRelativePath());
    }

    /**
     * @covers app\decibel\application\DApp::getManifest
     * @covers app\decibel\application\DAppManifest::__construct
     * @covers app\decibel\application\debug\DMissingAppManifestException::__construct
     */
    public function testGetManifest()
    {
        $this->setExpectedException(DMissingAppManifestException::class);
        $app = $this->getMockForAbstractClass(DApp::class);
        $app->getManifest();
    }

    /**
     * @covers app\decibel\application\DApp::getName
     */
    public function testGetName()
    {
        $this->setExpectedException(DMissingAppManifestException::class);
        $app = $this->getMockForAbstractClass(DApp::class);
        $app->getName();
    }

    /**
     * @covers app\decibel\application\DApp::getCopyright
     */
    public function testGetCopyright()
    {
        $this->setExpectedException(DMissingAppManifestException::class);
        $app = $this->getMockForAbstractClass(DApp::class);
        $app->getCopyright();
    }

    /**
     * @covers app\decibel\application\DApp::getVersion
     */
    public function testGetVersion()
    {
        $this->setExpectedException(DMissingAppManifestException::class);
        $app = $this->getMockForAbstractClass(DApp::class);
        $app->getVersion();
    }

    /**
     * @covers app\decibel\application\DApp::__get
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__getInvalid()
    {
        $app = new Decibel();
        $app->invalid;
    }

    /**
     * @covers app\decibel\application\DApp::canGenerateInstaller
     */
    public function testCanGenerateInstaller()
    {
        $app = $this->getMockForAbstractClass(DApp::class);
        $result = $app->canGenerateInstaller();
        $this->assertInstanceOf(DResult::class, $result);
        $this->assertTrue($result->isSuccessful());
    }

    /**
     * @covers app\decibel\application\DApp::getDependentApps
     */
    /*public function testGetDependentApps() {
        $app = new TestApp();
        $result = $app->getDependentApps();
        $this->assertSame(array(), $result);

        $decibel = new Decibel();
        $decibelResult = $decibel->getDependentApps();
        $this->assertInternalType('array', $decibelResult);
        $this->assertContainsOnly(DApp::class, $decibelResult);
    }*/
    /**
     * @covers app\decibel\application\DApp::getLoadPriority
     */
    public function testGetLoadPriority()
    {
        $app = $this->getMockForAbstractClass('\app\decibel\application\DApp');
        $this->assertSame(5, $app->getLoadPriority());
    }

    /**
     * @covers app\decibel\application\DApp::getAbsolutePath
     */
    public function testGetAbsolutePath()
    {
        /** @var DApp $app */
        $app = $this->getMockForAbstractClass(DApp::class);
        $defaultRelativePath = dirname(str_replace(NAMESPACE_SEPARATOR,
                                                   DIRECTORY_SEPARATOR, DApp::class))
                             . DIRECTORY_SEPARATOR;
        $this->assertSame(DECIBEL_PATH . $defaultRelativePath, $app->getAbsolutePath());
        $this->assertSame(DECIBEL_PATH, $app->setRelativePath('')->getAbsolutePath());
    }

    /**
     * @covers app\decibel\application\DApp::getRootNamespace
     */
    public function testGetRootNamespace()
    {
        $app = $this->getMockForAbstractClass(DApp::class);
        $this->assertSame('app\\decibel\\application', $app->getRootNamespace());
    }

    /**
     * @covers app\decibel\application\DApp::getTranslationScope
     */
    public function testGetTranslationScope()
    {
        $app = $this->getMockForAbstractClass(DApp::class);
        $this->assertSame(DGlobalTranslationScope::class, $app->getTranslationScope());
    }
}
