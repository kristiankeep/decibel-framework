<?php
namespace tests\app\decibel\reflection;

use app\decibel\authorise\DGuestUser;
use app\decibel\reflection\DReflectionClass;
use app\decibel\reflection\DReflectionProperty;
use app\decibel\test\DTestCase;

/**
 * Test class for DReflectionProperty.
 * Generated by Decibel on 2012-04-12 at 09:07:35.
 */
class DReflectionPropertyTest extends DTestCase
{
    public function setUp()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * Returns a {@link DReflectionProperty} object for testing.
     *
     * @param    DField          $field               Pointer to the
     *                                                {@link app::decibel::model::field::DField DField}
     *                                                object that is reflected.
     * @param    ReflectionClass $reflectionClass     Pointer to the class that
     *                                                is reflected.
     *
     * @return DReflectionProperty
     */
    public function getReflectionProperty(&$field = null, &$reflectionClass = null)
    {
        $guest = DGuestUser::create();
        $field = $guest->getField(DGuestUser::FIELD_USERNAME);
        $reflectionClass = new DReflectionClass(DGuestUser::class);

        return new DReflectionProperty($reflectionClass, $field);
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::__construct
     * @covers app\decibel\reflection\DReflectionProperty::getDeclaringClass
     * @covers app\decibel\reflection\DReflectionProperty::getName
     */
    public function test__construct()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = null;
        $reflectionClass = null;
        $reflection = $this->getReflectionProperty($field, $reflectionClass);
        $this->assertInstanceOf('app\\decibel\\reflection\\DReflectionProperty', $reflection);
        $this->assertSame($reflectionClass, $reflection->getDeclaringClass());
        $this->assertSame($field->getName(), $reflection->getName());
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::__get
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__getInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $reflection = $this->getReflectionProperty();
        $reflection->invalid;
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::generateDebug
     */
    public function testgenerateDebug()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $reflection = $this->getReflectionProperty();
        $this->assertSame(
            array(
                'class' => DGuestUser::class,
                'name'  => DGuestUser::FIELD_USERNAME,
            ),
            $reflection->generateDebug()
        );
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::export
     * @expectedException app\decibel\debug\DNotImplementedException
     */
    public function testexport()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $reflection = $this->getReflectionProperty();
        $reflection->export('class', 'name');
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::getModifiers
     * @expectedException app\decibel\debug\DNotImplementedException
     */
    public function testgetModifiers()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $reflection = $this->getReflectionProperty();
        $reflection->getModifiers();
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::getValue
     */
    public function testgetValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $reflection = $this->getReflectionProperty();
        $guest = DGuestUser::create();
        $this->assertSame('guest', $reflection->getValue($guest));
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::isDefault
     */
    public function testisDefault()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $reflection = $this->getReflectionProperty();
        $this->assertTrue($reflection->isDefault());
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::isPrivate
     */
    public function testisPrivate()
    {
        $reflection = $this->getReflectionProperty();
        $this->assertFalse($reflection->isPrivate());
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::isProtected
     */
    public function testisProtected()
    {
        $reflection = $this->getReflectionProperty();
        $this->assertFalse($reflection->isProtected());
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::isPublic
     */
    public function testisPublic()
    {
        $reflection = $this->getReflectionProperty();
        $this->assertTrue($reflection->isPublic());
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::isStatic
     */
    public function testisStatic()
    {
        $reflection = $this->getReflectionProperty();
        $this->assertFalse($reflection->isStatic());
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::setAccessible
     */
    public function testsetAccessible()
    {
        $reflection = $this->getReflectionProperty();
        $this->assertNull($reflection->setAccessible(true));
    }

    /**
     * @covers app\decibel\reflection\DReflectionProperty::setValue
     */
    public function testsetValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $guest = DGuestUser::create();
        $reflection = $this->getReflectionProperty();
        $this->assertNull($reflection->setValue($guest, 'guest2'));
        $this->assertSame('guest2', $guest->getFieldValue(DGuestUser::FIELD_USERNAME));
    }
}
