<?php
namespace tests\app\decibel\model\field;

use app\decibel\database\schema\DColumnDefinition;
use app\decibel\model\field\DEnumField;
use app\decibel\model\field\DField;
use app\decibel\test\DTestCase;

/**
 * Test class for DEnumField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DEnumFieldTest extends DTestCase
{
    /**
     * @covers app\decibel\model\field\DEnumField::castValue
     */
    public function testcastValue_null()
    {
        $field = new DEnumField('test', 'Test');
        $field->setNullOption('Null');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::castValue
     */
    public function testcastValue_nullInvalid()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::castValue
     */
    public function testcastValue_stringNumeric()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame(1, $field->castValue('1'));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testcastValue_stringInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $field->castValue('test');
    }

    /**
     * @covers app\decibel\model\field\DEnumField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testcastValue_invalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $field->castValue(3);
    }

    /**
     * @covers app\decibel\model\field\DEnumField::castValue
     */
    public function testcastValue()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame(2, $field->castValue(2));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::debugValue
     */
    public function testdebugValue_null()
    {
        $showType = null;
        $field = new DEnumField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertSame('NULL [Null]', $field->debugValue(null, $showType));
        $this->assertFalse($showType);
    }

    /**
     * @covers app\decibel\model\field\DEnumField::debugValue
     */
    public function testdebugValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $showType = null;
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame('int(1) [value1]', $field->debugValue(1, $showType));
        $this->assertFalse($showType);
        $this->assertSame('int(2) [value2]', $field->debugValue(2, $showType));
        $this->assertFalse($showType);
        $this->assertSame('int(3) [-- Unknown Value --]', $field->debugValue(3, $showType));
        $this->assertFalse($showType);
        //$this->assertSame('Array [-- Unknown Value --]', $field->debugValue(array(1)));
        //$this->assertFalse($showType);
    }

    /**
     * @covers app\decibel\model\field\DEnumField::getDefinition
     */
    public function testgetDefinition()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DEnumField('test', 'Test');
        $definition = $field->getDefinition();
        $this->assertInstanceOf(DColumnDefinition::class, $definition);
        $this->assertTrue($definition->null);
    }

    /**
     * @covers app\decibel\model\field\DEnumField::getInternalDataType
     */
    public function testgetInternalDataType()
    {
        $field = new DEnumField('test', 'Test');
        $this->assertSame('integer', $field->getInternalDataType());
    }

    /**
     * @covers app\decibel\model\field\DEnumField::getInternalDataTypeDescription
     */
    public function testgetInternalDataTypeDescription()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                          ));
        $this->assertSame('One of <code>1</code>', $field->getInternalDataTypeDescription());
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame('One of <code>1</code> or <code>2</code>', $field->getInternalDataTypeDescription());
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                              3 => 'value3',
                          ));
        $this->assertSame('One of <code>1</code>, <code>2</code> or <code>3</code>',
                          $field->getInternalDataTypeDescription());
    }

    /**
     * @covers app\decibel\model\field\DEnumField::isValidValue
     */
    public function testisValidValue()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertTrue($field->isValidValue(1));
        $this->assertTrue($field->isValidValue(2));
        $this->assertFalse($field->isValidValue(3));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::getRandomValue
     */
    public function testgetRandomValue()
    {
        $field = new DEnumField('test', 'Test');
        $this->assertNull($field->getRandomValue());
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                              3 => 'value3',
                          ));
        $this->assertInternalType('integer', $field->getRandomValue());
        $this->assertContains($field->getRandomValue(), array(1, 2, 3));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::getStandardDefaultValue
     */
    public function testgetStandardDefaultValue()
    {
        $field = new DEnumField('test', 'Test');
        $this->assertNull($field->getDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DEnumField::getValues
     */
    public function testgetValues()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame(array(
                              1 => 'value1',
                              2 => 'value2',
                          ), $field->getValues());
    }

    /**
     * @covers app\decibel\model\field\DEnumField::isNull
     */
    public function testisNull()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $field = new DEnumField('test', 'Test');
        $this->assertTrue($field->isNull(null));
        $this->assertTrue($field->isNull(''));
        $this->assertFalse($field->isNull(0));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::setDefaultOptions
     */
    public function testsetDefaultOptions()
    {
        $field = new DEnumField('test', 'Test');
        $this->assertSame(1, $field->size);
        $this->assertTrue($field->unsigned);
    }

    /**
     * @covers app\decibel\model\field\DEnumField::setValues
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetValues_maximumKey()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1   => 'value1',
                              256 => 'value2',
                          ));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::setValues
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testsetValues_minimumKey()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1  => 'value1',
                              -1 => 'value2',
                          ));
    }

    /**
     * @covers app\decibel\model\field\DEnumField::setValues
     */
    public function testsetValues_numericKey()
    {
        $field = new DEnumField('test', 'Test');
        // This will be ok as PHP will cast the integer to a string
        // on creation of the array.
        $this->assertSame($field, $field->setValues(array(
                                                        1   => 'value1',
                                                        '2' => 'value2',
                                                    )));
        $this->assertSame(array(
                              '1' => 'value1',
                              '2' => 'value2',
                          ), $field->getValues());
    }

    /**
     * @covers app\decibel\model\field\DEnumField::setValues
     */
    public function testsetValues()
    {
        $field = new DEnumField('test', 'Test');
        $values = array(
            1 => 'value1',
            2 => 'value2',
        );
        $this->assertSame($field, $field->setValues($values));
        $this->assertSame($values, $field->getValues());
    }

    /**
     * @covers app\decibel\model\field\DEnumField::toString
     */
    public function testtoString()
    {
        $field = new DEnumField('test', 'Test');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame('value1', $field->toString(1));
        $this->assertSame('value2', $field->toString(2));
        $this->assertLabel($field->toString(3), 'unknownValue', DField::class);
        $this->assertLabel($field->toString(null), 'unknownValue', DField::class);
    }

    /**
     * @covers app\decibel\model\field\DEnumField::toString
     */
    public function testtoString_null()
    {
        $field = new DEnumField('test', 'Test');
        $field->setNullOption('Null');
        $field->setValues(array(
                              1 => 'value1',
                              2 => 'value2',
                          ));
        $this->assertSame('Null', $field->toString(null));
    }
}
