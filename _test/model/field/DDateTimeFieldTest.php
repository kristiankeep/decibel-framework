<?php
namespace tests\app\decibel\model\field;

use app\decibel\model\field\DDateTimeField;
use app\decibel\model\field\DFieldSearch;
use app\decibel\test\DTestCase;
use app\decibel\utility\DDate;

/**
 * Test class for DDateTimeField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DDateTimeFieldTest extends DTestCase
{
    /**
     * @covers app\decibel\model\field\DDateTimeField::castValue
     */
    public function testcastValue_null()
    {
        $field = new DDateTimeField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::castValue
     */
    public function testcastValue_nullInvalid()
    {
        $field = new DDateTimeField('test', 'Test');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::castValue
     */
    public function testcastValue_integer()
    {
        $field = new DDateTimeField('test', 'Test');
        $this->assertSame(1, $field->castValue(1));
        $this->assertSame(1234743743, $field->castValue('1234743743'));
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::castValue
     */
    public function testcastValue_string()
    {
        $field = new DDateTimeField('test', 'Test');
        $this->assertSame(strtotime('01/01/2020 09:15'), $field->castValue('01/01/2020 09:15'));
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::castValue
     */
    public function testcastValue_stringEmpty()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateTimeField('test', 'Test');
        $this->assertNull($field->castValue(''));
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testcastValue_stringInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateTimeField('test', 'Test');
        $field->castValue('test');
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::debugValue
     */
    public function testdebugValue_null()
    {
        $showType = null;
        $field = new DDateTimeField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertSame('NULL [Null]', $field->debugValue(null, $showType));
        $this->assertFalse($showType);
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::debugValue
     */
    public function testdebugValue()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $showType = null;
        $field = new DDateTimeField('test', 'Test');
        $this->assertSame('int(1577836800) [' . date(DDate::getDateTimeFormat(), 1577836800) . ']',
                          $field->debugValue(1577836800, $showType));
        $this->assertFalse($showType);
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::getRandomValue
     */
    public function testgetRandomValue()
    {
        $field = new DDateTimeField('test', 'Test');
        // Can only really check that an integer is returned.
        $this->assertInternalType('integer', $field->getRandomValue());
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::getStandardDefaultValue
     */
    public function testgetStandardDefaultValue()
    {
        $field = new DDateTimeField('test', 'Test');
        $this->assertSame(time(), $field->getDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::getStandardDefaultValue
     */
    public function testgetStandardDefaultValue_null()
    {
        $field = new DDateTimeField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertNull($field->getDefaultValue());
    }

    //	/**
    //	 * @covers app\decibel\model\field\DDateTimeField::getInternalDataType
    //	 */
    //	public function testgetInternalDataType() {
    //		$field = new DDateTimeField('test', 'Test');
    //		$this->assertSame('boolean', $field->getInternalDataType());
    //	}
    //
    //	/**
    //	 * @covers app\decibel\model\field\DDateTimeField::getRandomValue
    //	 */
    //	public function testgetRandomValue() {
    //		$field = new DDateTimeField('test', 'Test');
    //		$this->assertInternalType('boolean', $field->getRandomValue());
    //	}
    /**
     * @covers app\decibel\model\field\DDateTimeField::setDefaultOptions
     */
    public function testsetDefaultOptions()
    {
        $field = new DDateTimeField('test', 'Test');
        $this->assertSame(4, $field->size);
        $this->assertFalse($field->unsigned);
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::setSize
     * @expectedException app\decibel\debug\DReadOnlyParameterException
     */
    public function testsetSize()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateTimeField('test', 'Test');
        $field->setSize(1);
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::setUnsigned
     * @expectedException app\decibel\debug\DReadOnlyParameterException
     */
    public function testsetUnsigned()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateTimeField('test', 'Test');
        $field->setUnsigned(true);
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::toString
     */
    public function testtoString()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateTimeField('test', 'Test');
        $this->assertSame(date(DDate::getDateTimeFormat(), 111222333), $field->toString(111222333));
    }

    /**
     * @covers app\decibel\model\field\DDateTimeField::toString
     */
    public function testtoString_null()
    {
        $field = new DDateTimeField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertSame('Null', $field->toString(null));
    }
}
