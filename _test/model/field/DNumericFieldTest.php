<?php
namespace tests\app\decibel\model\field;

use app\decibel\database\schema\DColumnDefinition;
use app\decibel\model\field\DField;
use app\decibel\model\field\DNumericField;
use app\decibel\test\DTestCase;

class TestNumericField extends DNumericField
{
    protected function setDefaultOptions()
    {
        $this->size = 4;
        $this->unsigned = false;
    }
}

class TestFloatField extends DNumericField
{
    public function getInternalDataType()
    {
        return 'double';
    }

    protected function setDefaultOptions()
    {
        $this->size = 4;
        $this->unsigned = false;
    }
}

/**
 * Test class for DNumericField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DNumericFieldTest extends DTestCase
{
    public function setUp()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     */
    public function testCastValueNull()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     */
    public function testCastValueNullInvalid()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame(0, $field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testCastValueInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->castValue('invalid');
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     */
    public function testCastValueNumericString()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame(10, $field->castValue('10'));
        $this->assertSame(10, $field->castValue('10.1'));
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testCastValueTooSmall()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->setSize(1);
        $field->castValue(-129);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testCastValueTooSmallUnsigned()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->setUnsigned(true);
        $field->castValue(-1);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testCastValueTooLarge()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->setSize(1);
        $field->castValue(128);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::castValue
     */
    public function testCastValueInteger()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setSize(1);
        $this->assertSame(-128, $field->castValue(-128));
        $this->assertSame(0, $field->castValue(0));
        $this->assertSame(127, $field->castValue(127));
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getDataType
     */
    public function testGetDataType()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setSize(1);
        $this->assertSame(DField::DATA_TYPE_TINYINT, $field->getDataType());
        $field->setSize(2);
        $this->assertSame(DField::DATA_TYPE_SMALLINT, $field->getDataType());
        $field->setSize(3);
        $this->assertSame(DField::DATA_TYPE_MEDIUMINT, $field->getDataType());
        $field->setSize(4);
        $this->assertSame(DField::DATA_TYPE_INT, $field->getDataType());
        $field->setSize(8);
        $this->assertSame(DField::DATA_TYPE_BIGINT, $field->getDataType());
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getDefinition
     */
    public function testGetDefinition()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->setUnsigned(true);
        $field->setSize(3);
        $field->autoincrement = true;
        $definition = $field->getDefinition();
        $this->assertInstanceOf(DColumnDefinition::class, $definition);
        $this->assertTrue($definition->unsigned);
        $this->assertSame(DField::DATA_TYPE_MEDIUMINT, $definition->type);
        $this->assertTrue($definition->autoincrement);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getInternalDataType
     */
    public function testGetInternalDataType()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame('integer', $field->getInternalDataType());
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getInternalDataTypeDescription
     */
    public function testGetInternalDataTypeDescription()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setSize(1);
        $this->assertSame('integer between -128 and 127', $field->getInternalDataTypeDescription());
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getRegex
     */
    public function testGetRegex()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame('[0-9]+', $field->getRegex());
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getStandardDefaultValue
     */
    public function testGetStandardDefaultValue()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame(0, $field->getStandardDefaultValue());
        $field->setNullOption('Null');
        $this->assertNull($field->getStandardDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getValueBoundary
     */
    public function testGetValueBoundaryFloat()
    {
        $field = new TestFloatField('test', 'Test');
        $minimum = null;
        $maximum = null;
        $this->assertFalse($field->getValueBoundary($minimum, $maximum));
        $this->assertNull($minimum);
        $this->assertNull($maximum);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getValueBoundary
     */
    public function testGetValueBoundarySigned()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setUnsigned(false);
        $minimum = null;
        $maximum = null;
        $field->setSize(1);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(-128.0, $minimum);
        $this->assertSame(127.0, $maximum);
        $field->setSize(2);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(-32768.0, $minimum);
        $this->assertSame(32767.0, $maximum);
        $field->setSize(3);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(-8388608.0, $minimum);
        $this->assertSame(8388607.0, $maximum);
        $field->setSize(4);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(-2147483648.0, $minimum);
        $this->assertSame(2147483647.0, $maximum);
        //		$field->setSize(8);
        //		$this->assertTrue($field->getValueBoundary($minimum, $maximum));
        //		$this->assertSame(-9.2233720368548E+18, $minimum);
        //		$this->assertSame(9.2233720368548E+18, $maximum);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::getValueBoundary
     */
    public function testGetValueBoundaryUnsigned()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setUnsigned(true);
        $minimum = null;
        $maximum = null;
        $field->setSize(1);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(0, $minimum);
        $this->assertSame(255, $maximum);
        $field->setSize(2);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(0, $minimum);
        $this->assertSame(65535, $maximum);
        $field->setSize(3);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(0, $minimum);
        $this->assertSame(16777215, $maximum);
        $field->setSize(4);
        $this->assertTrue($field->getValueBoundary($minimum, $maximum));
        $this->assertSame(0, $minimum);
        $this->assertSame(4294967295, $maximum);
        //		$field->setSize(8);
        //		$this->assertTrue($field->getValueBoundary($minimum, $maximum));
        //		$this->assertSame(0, $minimum);
        //		$this->assertSame(1.844674407371E+19, $maximum);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::setAutoincrement
     */
    public function testSetAutoincrement()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame($field, $field->setAutoincrement(true));
        $this->assertTrue($field->autoincrement);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::setAutoincrement
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetAutoincrementInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->setAutoincrement(10);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::setSize
     */
    public function testSetSize()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame($field, $field->setSize(1));
        $this->assertSame(1, $field->size);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::setSize
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetSizeInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestNumericField('test', 'Test');
        $field->setSize(10);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::setUnsigned
     */
    public function testSetUnsigned()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame($field, $field->setUnsigned(true));
        $this->assertTrue($field->unsigned);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::setUnsigned
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetUnsignedInvalid()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setUnsigned(10);
    }

    /**
     * @covers app\decibel\model\field\DNumericField::toString
     */
    public function testToString()
    {
        $field = new TestNumericField('test', 'Test');
        $this->assertSame('10', $field->toString(10));
        $this->assertSame('', $field->toString(null));
    }

    /**
     * @covers app\decibel\model\field\DNumericField::toString
     */
    public function testToStringNull()
    {
        $field = new TestNumericField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertSame('10', $field->toString(10));
        $this->assertSame('Null', $field->toString(null));
    }
}
