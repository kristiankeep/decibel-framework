<?php
namespace tests\app\decibel\model\field;

use app\decibel\model\debug\DInvalidFieldValueException;
use app\decibel\model\field\DDateField;
use app\decibel\model\field\DField;
use app\decibel\model\field\DFieldSearch;
use app\decibel\test\DTestCase;
use app\decibel\utility\DDate;

/**
 * Test class for DDateField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DDateFieldTest extends DTestCase
{
    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueNull()
    {
        $field = new DDateField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueNullInvalid()
    {
        $field = new DDateField('test', 'Test');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueInteger()
    {
        $field = new DDateField('test', 'Test');
        $this->assertSame('1970-01-01', $field->castValue(1));
        $this->assertSame('2009-02-16', $field->castValue('1234743743'));
    }

    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueString()
    {
        $field = new DDateField('test', 'Test');
        $this->assertSame('2020-01-01', $field->castValue('2020-01-01'));
    }

    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueStringStrtotime()
    {
        $field = new DDateField('test', 'Test');
        $this->assertSame('1970-01-01', $field->castValue('1 Jan 1970 10:42am'));
    }

    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueStringEmpty()
    {
        $field = new DDateField('test', 'Test');
        $this->assertNull($field->castValue(''));
    }

    /**
     * @covers app\decibel\model\field\DDateField::castValue
     */
    public function testCastValueStringInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $this->setExpectedException(DInvalidFieldValueException::class);

        $field = new DDateField('test', 'Test');
        $field->castValue('test');
    }

    /**
     * @covers app\decibel\model\field\DDateField::getDataType
     */
    public function testGetDataType()
    {
        $field = new DDateField('test', 'Test');
        $this->assertSame(DField::DATA_TYPE_DATE, $field->getDataType());
    }

    /**
     * @covers app\decibel\model\field\DDateField::getInternalDataType
     */
    public function testGetInternalDataType()
    {
        $field = new DDateField('test', 'Test');
        $this->assertSame('string', $field->getInternalDataType());
    }

    /**
     * @covers app\decibel\model\field\DDateField::getRandomValue
     */
    public function testGetRandomValue()
    {
        $field = new DDateField('test', 'Test');
        // Check valid format of returned value.
        $this->assertInternalType('string', $field->getRandomValue());
        $this->assertRegExp('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $field->getRandomValue());
    }

    /**
     * @covers app\decibel\model\field\DDateField::getSearchOptions
     */
    public function testGetSearchOptions()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateField('test', 'Test');
        $options = $field->getSearchOptions();
        $this->assertInstanceOf(DFieldSearch::class, $options);
        $this->assertSame(array(
                              DFieldSearch::OPERATOR_EQUAL        => 'On',
                              DFieldSearch::OPERATOR_LESS_THAN    => 'Before',
                              DFieldSearch::OPERATOR_GREATER_THAN => 'After',
                          ), $options->operators);
    }

    /**
     * @covers app\decibel\model\field\DDateField::getSearchOptions
     */
    public function testGetSearchOptionsNull()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateField('test', 'Test');
        $field->setNullOption('Null');
        $options = $field->getSearchOptions();
        $this->assertInstanceOf(DFieldSearch::class, $options);
        $this->assertSame(array(
                              DFieldSearch::OPERATOR_EQUAL        => 'On',
                              DFieldSearch::OPERATOR_LESS_THAN    => 'Before',
                              DFieldSearch::OPERATOR_GREATER_THAN => 'After',
                              DFieldSearch::OPERATOR_IS_NULL      => 'Null',
                          ), $options->operators);
    }

    /**
     * @covers app\decibel\model\field\DDateField::getStandardDefaultValue
     */
    public function testGetStandardDefaultValue()
    {
        $field = new DDateField('test', 'Test');
        $this->assertSame(date('Y-m-d'), $field->getDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DDateField::getStandardDefaultValue
     */
    public function testGetStandardDefaultValueNull()
    {
        $field = new DDateField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertNull($field->getDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DDateField::setDefaultOptions
     */
    public function testSetDefaultOptions()
    {
        new DDateField('test', 'Test');
        // Method doesn't actually do anything...
    }

    /**
     * @covers app\decibel\model\field\DDateField::toString
     */
    public function testToString()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DDateField('test', 'Test');
        $this->assertSame(date(DDate::getDateFormat(), 111222333), $field->toString('1973-07-11'));
    }

    /**
     * @covers app\decibel\model\field\DDateField::toString
     */
    public function testToStringNull()
    {
        $field = new DDateField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertSame('Null', $field->toString(null));
    }
}
