<?php
namespace tests\app\decibel\model\field;

use app\decibel\configuration\DApplicationMode;
use app\decibel\debug\DInvalidParameterValueException;
use app\decibel\model\field\DField;
use app\decibel\model\field\DInvalidFieldNameException;
use app\decibel\model\field\DReservedFieldNameException;
use app\decibel\test\DTestCase;

class TestField extends DField
{
    public function getStandardDefaultValue()
    {
        return null;
    }

    protected function setDefaultOptions()
    {
        $this->description = 'Description';
    }

    public function castValue($value)
    {
        return (string)$value;
    }

    public function getDataType()
    {
        return 'varchar';
    }

    public function getInternalDataType()
    {
        return 'string';
    }

    public function toString($data)
    {
        return (string)$data;
    }
}

/**
 * Test class for DField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DFieldTest extends DTestCase
{
    /**
     * @throws \app\decibel\debug\DInvalidParameterValueException
     */
    public function tearDown()
    {
        DApplicationMode::setMode(DApplicationMode::MODE_TEST);
    }

    /**
     * @covers app\decibel\model\field\DField::__construct
     */
    public function test__construct()
    {
        $field = new TestField('test', 'Test');
        $this->assertInstanceOf(DField::class, $field);
        $this->assertSame('test', $field->getName());
        $this->assertSame('Test', $field->getDisplayName());
        $this->assertSame('Description', $field->getDescription());
        $this->assertNull($field->getDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DField::__construct
     */
    public function test__constructDefault()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $field = new TestField('test', 'Test', 'default');
        $this->assertSame('default', $field->getDefaultValue());
    }

    /**
     * @covers app\decibel\model\field\DField::getDatabaseMapper
     */
    public function testGetDatabaseMapper()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new TestField('test', 'Test');
        $mapper = $field->getDatabaseMapper();
        $this->assertInstanceof('app\\decibel\\model\\field\\DFieldDatabaseMapper', $mapper);
        $this->assertSame($mapper, $field->getDatabaseMapper());
    }

    /**
     * @covers app\decibel\model\field\DField::getDescription
     */
    public function testGetDescription()
    {
        $field = new TestField('test', 'Test');
        $field->setDescription('description');
        $this->assertSame('description', $field->getDescription());
    }

    /**
     * @covers app\decibel\model\field\DField::getInternalDataTypeDescription
     */
    public function testGetInternalDataTypeDescription()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame('string', $field->getInternalDataTypeDescription());
    }

    /**
     * @covers app\decibel\model\field\DField::getRegex
     */
    public function testGetRegex()
    {
        $field = new TestField('test', 'Test');
        $this->assertNull($field->getRegex());
    }

    /**
     * @covers app\decibel\model\field\DField::getSearchOptions
     */
    public function testGetSearchOptions()
    {
        $field = new TestField('test', 'Test');
        $this->assertNull($field->getSearchOptions());
    }

    /**
     * @covers app\decibel\model\field\DField::hasDescription
     */
    public function testHasDescription()
    {
        $field = new TestField('test', 'Test');
        $field->setDescription('description');
        $this->assertTrue($field->hasDescription());
        $field->setDescription(null);
        $this->assertFalse($field->hasDescription());
    }

    /**
     * @covers app\decibel\model\field\DField::isEmpty
     */
    public function testIsEmpty()
    {
        $field = new TestField('test', 'Test');
        $this->assertTrue($field->isEmpty(null));
        $this->assertTrue($field->isEmpty(''));
        $this->assertTrue($field->isEmpty(false));
        $this->assertTrue($field->isEmpty(array()));
        $this->assertFalse($field->isEmpty(true));
        $this->assertFalse($field->isEmpty(1));
        $this->assertFalse($field->isEmpty('test'));
        $this->assertFalse($field->isEmpty(array(1)));
    }

    /**
     * @covers app\decibel\model\field\DField::isNull
     */
    public function testIsNull()
    {
        $field = new TestField('test', 'Test');
        $this->assertTrue($field->isNull(null));
        $this->assertFalse($field->isNull(0));
        $this->assertFalse($field->isNull(''));
        $this->assertFalse($field->isNull(false));
        $this->assertFalse($field->isNull(array()));
        $this->assertFalse($field->isNull(true));
        $this->assertFalse($field->isNull(1));
        $this->assertFalse($field->isNull('test'));
        $this->assertFalse($field->isNull(array(1)));
    }

    /**
     * @covers app\decibel\model\field\DField::isOrderable
     */
    public function testIsOrderable()
    {
        $field = new TestField('test', 'Test');
        $this->assertTrue($field->isOrderable());
    }

    /**
     * @covers app\decibel\model\field\DField::isRandomisable
     */
    public function testIsRandomisable()
    {
        $field = new TestField('test', 'Test');
        $field->setReadOnly(true);
        $this->assertTrue($field->isRandomisable());
    }

    /**
     * @covers app\decibel\model\field\DField::setExportable
     */
    public function testSetExportable()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame($field, $field->setExportable(true));
        $this->assertTrue($field->isExportable());
    }

    /**
     * @covers app\decibel\model\field\DField::setExportable
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetExportableInvalid()
    {
        $field = new TestField('test', 'Test');
        $field->setExportable(10);
    }

    /**
     * @covers app\decibel\model\field\DField::setNullOption
     */
    public function testSetNullOption()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame($field, $field->setNullOption('Null'));
        $this->assertSame('Null', $field->nullOption);
    }

    /**
     * @covers app\decibel\model\field\DField::setNullOption
     */
    public function testSetNullOptionNull()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame($field, $field->setNullOption(null));
        $this->assertNull($field->nullOption);
    }

    /**
     * @covers app\decibel\model\field\DField::setNullOption
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetNullOptionInvalid()
    {
        $field = new TestField('test', 'Test');
        $field->setNullOption(10);
    }

    /**
     * @covers app\decibel\model\field\DField::setRandomisable
     */
    public function testSetRandomisable()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame($field, $field->setRandomisable(true));
        $this->assertTrue($field->randomisable);
    }

    /**
     * @covers app\decibel\model\field\DField::setRandomisable
     */
    public function testSetRandomisableInvalid()
    {
        $this->setExpectedException(DInvalidParameterValueException::class);
        $field = new TestField('test', 'Test');
        $field->setRandomisable(10);
    }

    /**
     * @covers app\decibel\model\field\DField::setReadOnly
     */
    public function testSetReadOnly()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame($field, $field->setReadOnly(true));
        $this->assertTrue($field->readOnly);
    }

    /**
     * @covers app\decibel\model\field\DField::setReadOnly
     */
    public function testSetReadOnlyInvalid()
    {
        $this->setExpectedException(DInvalidParameterValueException::class);
        $field = new TestField('test', 'Test');
        $field->setReadOnly(10);
    }

    /**
     * @covers app\decibel\model\field\DField::setRequired
     */
    public function testSetRequired()
    {
        $field = new TestField('test', 'Test');
        $this->assertSame($field, $field->setRequired(true));
        $this->assertTrue($field->required);
    }

    /**
     * @covers app\decibel\model\field\DField::setRequired
     */
    public function testSetRequiredInvalid()
    {
        $this->setExpectedException(DInvalidParameterValueException::class);
        $field = new TestField('test', 'Test');
        $field->setRequired(10);
    }

    /**
     * @covers app\decibel\model\field\DField::validateFieldName
     */
    public function testValidateFieldNameReserved()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $this->setExpectedException(DReservedFieldNameException::class);
        // Force debug mode.
        DApplicationMode::setMode(DApplicationMode::MODE_DEBUG);
        new TestField('post', 'Test');
    }

    /**
     * @covers app\decibel\model\field\DField::validateFieldName
     */
    public function testValidateFieldNameReservedProduction()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        // Force production mode.
        DApplicationMode::setMode(DApplicationMode::MODE_PRODUCTION);
        $field = new TestField('post', 'Test');
        $this->assertInstanceOf(DField::class, $field);
    }

    /**
     * @covers app\decibel\model\field\DField::validateFieldName
     */
    public function testValidateFieldNameInvalid()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $this->setExpectedException(DInvalidFieldNameException::class);
        // Force debug mode.
        DApplicationMode::setMode(DApplicationMode::MODE_DEBUG);
        new TestField('%test', 'Test');
    }

    /**
     * @covers app\decibel\model\field\DField::validateFieldName
     */
    public function testValidateFieldNameInvalidProduction()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        // Force production mode.
        DApplicationMode::setMode(DApplicationMode::MODE_PRODUCTION);
        $field = new TestField('%test', 'Test');
        $this->assertInstanceOf(DField::class, $field);
    }
}
