<?php
namespace tests\app\decibel\model\field;

use app\decibel\application\DClassManager;
use app\decibel\auditing\DAuditRecord;
use app\decibel\model\DBaseModel;
use app\decibel\model\field\DField;
use app\decibel\model\field\DQualifiedNameField;
use app\decibel\test\DTestCase;
use app\decibel\utility\DUtilityData;

/**
 * Test class for DQualifiedNameField.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DQualifiedNameFieldTest extends DTestCase
{
    public function setUp()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::__set
     */
    public function test__set()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->ancestor = DUtilityData::class;
        $this->assertSame(array(DUtilityData::class), $field->ancestor);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::__set
     * @expectedException app\decibel\debug\DInvalidPropertyException
     */
    public function test__setInvalid()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->invalid = true;
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::castValue
     */
    public function testCastValueNull()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setNullOption('Null');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::castValue
     */
    public function testCastValueNullInvalid()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $this->assertNull($field->castValue(null));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::castValue
     */
    public function testCastValueClassName()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $this->assertSame(DUtilityData::class, $field->castValue(DUtilityData::class));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testCastValueStringInvalid()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->castValue('test');
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::castValue
     * @expectedException app\decibel\model\debug\DInvalidFieldValueException
     */
    public function testCastValueInvalid()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->castValue(1);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::getInternalDataTypeDescription
     */
    public function testGetInternalDataTypeDescription()
    {
        $class = '<code>app\\\\([a-zA-Z]+\\\\)+[a-zA-Z]+<\/code>';
        $regex = "/Valid {$class}(, {$class})*( or {$class})? qualified class name/";
        $field = new DQualifiedNameField('test', 'Test');
        $this->assertSame('Valid qualified class name', $field->getInternalDataTypeDescription());
        $field->setAncestors(array(DUtilityData::class, DBaseModel::class));
        $this->assertRegExp($regex, $field->getInternalDataTypeDescription());
        $field->setAncestors(array(DUtilityData::class, DBaseModel::class, DAuditRecord::class));
        $this->assertRegExp($regex, $field->getInternalDataTypeDescription());
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::getValues
     */
    public function testGetValuesAll()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DQualifiedNameField('test', 'Test');
        $classes = DClassManager::getClasses();
        $this->assertSame(array_combine($classes, $classes), $field->getValues());
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::getValues
     */
    public function testGetValuesAncestor()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DQualifiedNameField('test', 'Test');
        $field->setAncestors(array(DUtilityData::class));
        $classes = DClassManager::getClasses(DUtilityData::class);
        $this->assertSame(array_combine($classes, $classes), $field->getValues());
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::getValues
     */
    public function testGetValuesNone()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DQualifiedNameField('test', 'Test');
        $field->setAncestors(array('app\\decibel\\model\\field\\DQualifiedNameField'));
        $this->assertSame(array(), $field->getValues());
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::isOrderable
     */
    public function testIsOrderable()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $this->assertFalse($field->isOrderable());
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::isValidClassName
     */
    public function testIsValidClassName()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $field = new DQualifiedNameField('test', 'Test');
        $this->assertTrue($field->isValidClassName('app\\decibel\\model\\field\\DQualifiedNameField'));
        $this->assertFalse($field->isValidClassName('app\\decibel\\DInvalidClassName'));
        $this->assertFalse($field->isValidClassName('DInvalidClassName'));
        $field->setAncestors(array(DField::class));
        $this->assertTrue($field->isValidClassName('app\\decibel\\model\\field\\DQualifiedNameField'));
        $this->assertFalse($field->isValidClassName(DUtilityData::class));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setAncestors
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetAncestorsInvalid()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setAncestors(array(10));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setAncestors
     */
    public function testSetAncestors()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setAncestors(array(
                                 DUtilityData::class,
                                 DField::class,
                             ));
        $this->assertSame(array(
                              DUtilityData::class,
                              DField::class,
                          ), $field->ancestor);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setAncestors
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetAncestorsArrayInvalid()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setAncestors(array(
                                 DUtilityData::class,
                                 10,
                             ));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setAncestors
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testSetAncestorsArrayInvalidClass()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setAncestors(array(
                                 DUtilityData::class,
                                 'app\\decibel\\DInvalidClassName',
                             ));
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setDefaultOptions
     */
    public function testSetDefaultOptions()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $this->assertFalse($field->isExportable());
        $this->assertFalse($field->randomisable);
        $this->assertSame(100, $field->maxLength);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setExportable
     * @expectedException app\decibel\debug\DReadOnlyParameterException
     */
    public function testSetExportable()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setExportable(true);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setMaxLength
     * @expectedException app\decibel\debug\DReadOnlyParameterException
     */
    public function testSetMaxLength()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setMaxLength(10);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::setRandomisable
     * @expectedException app\decibel\debug\DReadOnlyParameterException
     */
    public function testSetRandomisable()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $field->setRandomisable(true);
    }

    /**
     * @covers app\decibel\model\field\DQualifiedNameField::toString
     */
    public function testToString()
    {
        $field = new DQualifiedNameField('test', 'Test');
        $this->assertSame('test', $field->toString('test'));
        $this->assertSame('10', $field->toString(10));
        $this->assertSame('', $field->toString(null));
    }
}
