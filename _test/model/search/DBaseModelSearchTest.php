<?php
namespace tests\app\decibel\model\search;

use app\decibel\authorise\DRootUser;
use app\decibel\model\search\DBaseModelSearch;
use app\decibel\test\DTestCase;

class TestBaseModelSearch extends DBaseModelSearch
{
    public function __construct($qualifiedName)
    {
    }

    protected function orderJoins()
    {
    }
}

/**
 * Test class for DBaseModelSearch.
 * Generated by Decibel on 2012-04-12 at 09:08:41.
 */
class DBaseModelSearchTest extends DTestCase
{
    /**
     * @covers app\decibel\model\search\DBaseModelSearch::__get
     * @todo   Implement test__get().
     */
    public function test__get()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::__sleep
     */
    public function test__sleep()
    {
        $search = new TestBaseModelSearch('qualifiedName');
        $this->assertSame(
            array(
                'qualifiedName',
                'join',
                'key',
                'limitTo',
                'limitFrom',
                'conditions',
                'group',
                'sort',
                'sortOrder',
            ),
            $search->__sleep()
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::debug
     * @todo   Implement testdebug().
     */
    public function testdebug()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testRemoveDefaultFilters().
     */
    public function testRemoveDefaultFilters()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testFilterByField().
     */
    public function testFilterByField()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testIgnore().
     */
    public function testIgnore()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testLimitTo().
     */
    public function testLimitTo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGroupBy().
     */
    public function testGroupBy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSortBy().
     */
    public function testSortBy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testIncludeField().
     */
    public function testIncludeField()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testIncludeFields().
     */
    public function testIncludeFields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::getFields
     */
    public function testgetFields_single()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $rootUser = DRootUser::create();
        $rootId = $rootUser->getId();
        $search = DRootUser::search()
                           ->includeField(DRootUser::FIELD_USERNAME);
        $this->assertSame(
            array(
                $rootId => array(
                    DRootUser::FIELD_USERNAME => 'root',
                    'id'                      => $rootId,
                ),
            ),
            $search->getFields()
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::getFields
     */
    public function testgetFields_multiple()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $rootUser = DRootUser::create();
        $rootId = $rootUser->getId();
        $search = DRootUser::search()
                           ->includeFields(
                               DRootUser::FIELD_USERNAME,
                               'firstName'
                           );
        $this->assertSame(
            array(
                $rootId => array(
                    DRootUser::FIELD_USERNAME => 'root',
                    'firstName'               => 'System',
                    'id'                      => $rootId,
                ),
            ),
            $search->getFields()
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::getFields
     */
    public function testgetFields_all()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $rootUser = DRootUser::create();
        $rootId = $rootUser->getId();
        $search = DRootUser::search();
        $result = $search->getFields();
        unset($result[ $rootId ]['mypwToken']);
        $this->assertSame(
            array(
                $rootId => array(
                    'id'                 => $rootId,
                    'qualifiedName'      => 'app\decibel\authorise\DRootUser',
                    'guid'               => $rootUser->getGuid(),
                    'currentVersion'     => 1,
                    'version'            => 1,
                    'created'            => $rootUser->getFieldValue(DRootUser::FIELD_CREATED),
                    'lastUpdated'        => $rootUser->getFieldValue(DRootUser::FIELD_LAST_UPDATED),
                    'object_createdBy'   => $rootUser->getFieldValue(DRootUser::FIELD_CREATED_BY)->getId(),
                    'object_updatedBy'   => $rootUser->getFieldValue('object_updatedBy')->getId(),
                    'stringValue'        => 'System',
                    'profile'            => $rootUser->getProfile()->getId(),
                    'groups'             => null,
                    'username'           => 'root',
                    'salt'               => null,
                    'password'           => '',
                    'passwordResetToken' => '',
                    'passwordResetTime'  => 0,
                    'title'              => '',
                    'email'              => 'root@example.com',
                    'firstName'          => 'System',
                    'lastName'           => 'User',
                    'timezone'           => null,
                    'language'           => 'en-gb',
                    'changePassword'     => true,
                    'lockoutStatus'      => null,
                    'lockoutExpiry'      => null,
                    'lockoutReason'      => null,
                    'loginCount'         => $rootUser->getFieldValue('loginCount'),
                    'lastLogin'          => $rootUser->getFieldValue('lastLogin'),
                ),
            ),
            $result
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetIds().
     */
    public function testgetIds()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetId().
     */
    public function testgetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetObjects().
     */
    public function testGetObjects()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetObject().
     */
    public function testGetObject()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetPage().
     */
    public function testGetPage()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::getCount
     */
    public function testgetCount()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $search1 = DRootUser::search();
        $this->assertSame(1, $search1->getCount());
        $search2 = DRootUser::search()
                            ->filterByField(DRootUser::FIELD_USERNAME, 'invalid');
        $this->assertSame(0, $search2->getCount());
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::hasResults
     */
    public function testhasResults()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
        $search1 = DRootUser::search();
        $this->assertTrue($search1->hasResults());
        $search2 = DRootUser::search()
                            ->filterByField(DRootUser::FIELD_USERNAME, 'invalid');
        $this->assertFalse($search2->hasResults());
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testUncacheModel().
     */
    public function testUncacheModel()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testCurrent().
     */
    public function testCurrent()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testKey().
     */
    public function testKey()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testNext().
     */
    public function testNext()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testRewind().
     */
    public function testRewind()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::useKey
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testuseKey_invalidField()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        DRootUser::search()
                 ->useKey('invalid');
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::useKey
     * @expectedException app\decibel\debug\DInvalidParameterValueException
     */
    public function testuseKey_nonUniqueField()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        DRootUser::search()
                 ->useKey(DRootUser::FIELD_FIRST_NAME);
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::useKey
     */
    public function testuseKey_default()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $search = DRootUser::search()
                           ->includeField(DRootUser::FIELD_USERNAME)
                           ->useKey(null);
        $this->assertSame(
            array(
                0 => array(
                    DRootUser::FIELD_USERNAME => 'root',
                ),
            ),
            $search->getFields()
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::useKey
     */
    public function testuseKey_id()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $rootUser = DRootUser::create();
        $rootId = $rootUser->getId();
        $search = DRootUser::search()
                           ->includeField(DRootUser::FIELD_USERNAME)
                           ->useKey('id');
        $this->assertSame(
            array(
                $rootId => array(
                    DRootUser::FIELD_USERNAME => 'root',
                    'id'                      => $rootId,
                ),
            ),
            $search->getFields()
        );
    }

    /**
     * @covers app\decibel\model\search\DBaseModelSearch::useKey
     */
    public function testuseKey_custom()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $search = DRootUser::search()
                           ->includeField(DRootUser::FIELD_USERNAME)
                           ->useKey(DRootUser::FIELD_USERNAME);
        $this->assertSame(
            array(
                'root' => array(
                    DRootUser::FIELD_USERNAME => 'root',
                ),
            ),
            $search->getFields()
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testValid().
     */
    public function testValid()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
